{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "8ZkrgupsQxf6f9xXR",
  "code": "function bridgeShuffle(arr1, arr2) {\n  \n}",
  "difficulty": "Hard",
  "instructions": "<p><span>Create a function to </span><strong><span>bridge shuffle</span></strong><span> two arrays. To </span><strong><span>bridge shuffle</span></strong><span>, you interleave the elements from both arrays in an alternating fashion, like so:</span></p><pre><code>Array 1 = [\"A\", \"A\", \"A\"]\nArray 2 = [\"B\", \"B\", \"B\"]\n\nShuffled Array = [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"]</code></pre><p><span>This can still work with two arrays of uneven length. We simply tack on the extra elements from the longer array, like so:</span></p><pre><code>Array 1 = [\"C\", \"C\", \"C\", \"C\"]\nArray 2 = [\"D\"]\n\nShuffled Array = [\"C\", \"D\", \"C\", \"C\", \"C\"]</code></pre><p><span>Create a function that takes in two arrays and returns the bridge-shuffled array.</span></p><h3><span>Examples</span></h3><pre><code>bridgeShuffle([\"A\", \"A\", \"A\"], [\"B\", \"B\", \"B\"]) \u279e [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"]\n\nbridgeShuffle([\"C\", \"C\", \"C\", \"C\"], [\"D\"]) \u279e [\"C\", \"D\", \"C\", \"C\", \"C\"]\n\nbridgeShuffle([1, 3, 5, 7], [2, 4, 6]) \u279e [1, 2, 3, 4, 5, 6, 7]</code></pre><h3><span>Notes</span></h3><ul><li><span>Elements in both arrays can be strings or integers.</span></li><li><span>If two arrays are of unequal length, add the additional elements of the longer array to the end of the shuffled array.</span></li><li><span>Always start your shuffle with the first element of Array 1.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/8ZkrgupsQxf6f9xXR",
  "tags": [
    "arrays",
    "loops"
  ],
  "tests": "Test.assertSimilar(bridgeShuffle(['A', 'A', 'A'], ['B', 'B', 'B']), ['A', 'B', 'A', 'B', 'A', 'B'])\nTest.assertSimilar(bridgeShuffle(['C', 'C', 'C', 'C'], ['D']), ['C', 'D', 'C', 'C', 'C'])\nTest.assertSimilar(bridgeShuffle([1, 3, 5, 7], [2, 4, 6]), [1, 2, 3, 4, 5, 6, 7])\nTest.assertSimilar(bridgeShuffle([10, 9, 8], [1, 2, 3, 4]), [10, 1, 9, 2, 8, 3, 4])\nTest.assertSimilar(bridgeShuffle(['h', 'h', 'h'], ['a', 'a', 'a']), ['h', 'a', 'h', 'a', 'h', 'a'])",
  "title": "Bridge Shuffle"
}