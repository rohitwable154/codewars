{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "KYeCAfYxsvomapQg2",
  "code": "function allPairs(arr, target) {\n  \n}",
  "difficulty": "Hard",
  "instructions": "<p><span>Create a function that returns all </span><strong><span>pairs</span></strong><span> of numbers in an array that sum to a target. Sort the pairs in ascending order with respect to the smaller number, then order each pair in this order: </span><code>[smaller, larger]</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>allPairs([2, 4, 5, 3], 7) \u279e [[2, 5], [3, 4]]\n// 2 + 5 = 7, 3 + 4 = 7\n\nallPairs([5, 3, 9, 2, 1], 3) \u279e [[1, 2]]\n\nallPairs([4, 5, 1, 3, 6, 8], 9) \u279e [[1, 8], [3, 6], [4, 5]]\n// Sorted: 1 &lt; 3 &lt; 4; each pair is ordered [smaller, larger]</code></pre><h3><span>Notes</span></h3><ul><li><span>If no pairs are found, return an empty array </span><code>[]</code><span>.</span></li><li><span>You are only allowed to use each number once in a pair.</span></li><li><span>See Comments for a hint.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/KYeCAfYxsvomapQg2",
  "tags": [
    "algorithms",
    "arrays",
    "sorting"
  ],
  "tests": "Test.assertSimilar(allPairs([2, 4, 5, 3], 7), [[2, 5], [3, 4]])\nTest.assertSimilar(allPairs([5, 3, 9, 2, 1], 3), [[1, 2]])\nTest.assertSimilar(allPairs([4, 5, 1, 3, 6, 8], 9), [[1, 8], [3, 6], [4, 5]])\nTest.assertSimilar(allPairs([5, 2], 14), [])\nTest.assertSimilar(allPairs([5, 5, 2], 14), [])\nTest.assertSimilar(allPairs([8, 7, 7, 2, 4, 6], 14), [[6, 8], [7, 7]])\nTest.assertSimilar(allPairs([8, 7, 2, 4, 6], 14), [[6, 8]])\nTest.assertSimilar(allPairs([1, 3, 5, 4, 0], 4), [[0, 4], [1, 3]])\nTest.assertSimilar(allPairs([1, 3, 5, 4, 0, 2], 4), [[0, 4], [1, 3]])\nTest.assertSimilar(allPairs([1, 3, 5, 4, 0, 2, 2], 4), [[0, 4], [1, 3], [2, 2]])",
  "title": "All Pairs that Sum to Target"
}