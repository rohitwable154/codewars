{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "64JH2CWhLNkbzfRYW",
  "code": "function letters(word1, word2) {\n  \n}",
  "difficulty": "Hard",
  "instructions": "<p><span>Create a function that takes in two words as input and returns an array of three elements, in the following order:</span></p><ol><li><span>Shared letters between two words.</span></li><li><span>Letters unique to word 1.</span></li><li><span>Letters unique to word 2.</span></li></ol><p><span>Each element should have </span><strong><span>unique</span></strong><span> letters, and have each letter be </span><strong><span>alphabetically sorted</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>letters(\"sharp\", \"soap\") \u279e [\"aps\", \"hr\", \"o\"]\n\nletters(\"board\", \"bored\") \u279e [\"bdor\", \"a\", \"e\"]\n\nletters(\"happiness\", \"envelope\") \u279e [\"enp\", \"ahis\", \"lov\"]\n\nletters(\"kerfuffle\", \"fluffy\") \u279e [\"flu\", \"ekr\", \"y\"]\n// Even with multiple matching letters (e.g. 3 f's), there should \n// only exist a single \"f\" in your first element.\n\nletters(\"match\", \"ham\") \u279e [\"ahm\", \"ct\", \"\"]\n// \"ham\" does not contain any letters that are not found already \n// in \"match\".</code></pre><h3><span>Notes</span></h3><ul><li><span>Both words will be in lower case.</span></li><li><span>You do not have to worry about punctuation, all words only have letters from </span><code>[a-z]</code><span>.</span></li><li><span>If an element contains no letters, return an empty string (see last example).</span></li></ul>",
  "source_url": "https://edabit.com/challenge/64JH2CWhLNkbzfRYW",
  "tags": [
    "arrays",
    "strings"
  ],
  "tests": "Test.assertSimilar(letters(\"sharp\", \"soap\"), [\"aps\", \"hr\", \"o\"])\nTest.assertSimilar(letters(\"board\", \"bored\"), [\"bdor\", \"a\", \"e\"])\nTest.assertSimilar(letters(\"happiness\", \"envelope\"), [\"enp\", \"ahis\", \"lov\"])\nTest.assertSimilar(letters(\"match\", \"ham\"), [\"ahm\", \"ct\", \"\"])\nTest.assertSimilar(letters(\"kerfuffle\", \"fluffy\"), [\"flu\", \"ekr\", \"y\"])",
  "title": "Shared vs. Unique Letters"
}