{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "GSJ5RYWDQBiKnfpWP",
  "code": "function matryoshka(arr) {\n  \n}",
  "difficulty": "Hard",
  "instructions": "<p><span>Matryoshka dolls are traditionally wooden dolls that can be nested by fitting smaller dolls into larger ones. Suppose we can arrays can be nested similarly, placing </span><strong><span>smaller arrays</span></strong><span> into </span><strong><span>larger ones</span></strong><span>, in the following sense:</span></p><p><code>Array A</code><span> can be nested inside </span><code>Array B</code><span> if:</span></p><ol><li><code>min(array A)</code><span> &gt; </span><code>min(array B)</code></li><li><code>max(array A)</code><span> &lt; </span><code>max(array B)</code></li></ol><p><span>For example, if </span><code>A = [2, 3, 9, 5]</code><span> and </span><code>B = [10, 2, 1]</code><span>, then </span><code>A</code><span> can be nested inside </span><code>B</code><span>, since:</span></p><ul><li><code>min(A) = 2 &gt; 1 = min(B)</code><span> and</span></li><li><code>max(A) = 9 &lt; 10 = max(B)</code></li></ul><p><span>Create a function that returns </span><code>true</code><span> if every single sub-array inside an array can be nested Matroyshka style, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>matryoshka([[2, 2, 7], [3, 4, 5, 6], [4, 5]]) \u279e true\n// [4, 5] nested inside [3, 4, 5, 6], [3, 4, 5, 6] nested inside [2, 2, 7], etc.\n// Dolls nested from largest to smallest \n\nmatryoshka([[4, 5], [6, 3], [7, 6, 5, 4, 3, 2], [8, 1]]) \u279e true\n// Dolls nested from smallest to largest \n\nmatryoshka([[7, 1], [7, 6, 5, 4, 3, 2], [6, 3], [4, 5]]) \u279e false\n// [7, 2] and [7, 6, 5, 4, 3, 2] share the same max.\n// Second doll cannot be nested properly inside first doll \n\nmatryoshka([[1, 5], [2, 6], [3, 7]]) \u279e false\n// Elements are overlapping, cannot be nested.</code></pre><h3><span>Notes</span></h3><ul><li><span>Subarrays can be nested from smallest to largest or largest to smallest.</span></li><li><span>Elements must be strictly nested - e.g. no two arrays can share either the same MAX or the same MIN (see example #3).</span></li><li><span>Sub-arrays may not necessarily have unique elements (see example #1).</span></li><li><span>Sub-arrays can be in any order (see example #2).</span></li></ul>",
  "source_url": "https://edabit.com/challenge/GSJ5RYWDQBiKnfpWP",
  "tags": [
    "arrays",
    "logic",
    "sorting",
    "validation"
  ],
  "tests": "Test.assertEquals(matryoshka([[1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6], [4, 5]]), true)\nTest.assertEquals(matryoshka([[4, 5], [2, 6], [1, 9], [-5, 10, 11]]), true)\nTest.assertEquals(matryoshka([[3, 3], [4, 4], [5, 5, 5]]), false)\nTest.assertEquals(matryoshka([[1, 1, 1, 1, 2], [3, 2, 5, 0], [-1, 500]]), true)\nTest.assertEquals(matryoshka([[1, 8], [2, 3, 4, 5, 6, 7], [3, 6], [4, 5]]), true)\nTest.assertEquals(matryoshka([[6, 2], [9, 4]]), false, 'cannot be overlapping')\nTest.assertEquals(matryoshka([[7, 1], [7, 6, 5, 4, 3, 2], [6, 3], [4, 5]]), false, 'must be strictly nested')\nTest.assertEquals(matryoshka([[1, 5], [2, 6], [3, 7]]), false)\nTest.assertEquals(matryoshka([[5, 1], [4, 2], [4, 2]]), false, 'must be strictly nested')\nTest.assertEquals(matryoshka([[5, 1], [4, 2], [3, 3]]), true)\nTest.assertEquals(matryoshka([[5, 1], [4, 2], [3, 3, 3, 3, 3, 3, 3]]), true)\nTest.assertEquals(matryoshka([[1, 2, 3, 4], [2, 3, 4]]), false, 'must be strictly nested')\nTest.assertEquals(matryoshka([[1, 2, 3, 4], [2, 3]]), true)\nTest.assertEquals(matryoshka([[1, 50, 100], [3, 25, 75], [10, 40, 50], [25, 45]]), true)\nTest.assertEquals(matryoshka([[1, 50, 100], [3, 25, 75], [10, 40, 50], [25, 55]]), false, 'cannot be overlapping')",
  "title": "Matryoshka Dolls"
}