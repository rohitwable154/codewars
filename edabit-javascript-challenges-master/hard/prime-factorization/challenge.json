{
  "author_id": "kochug",
  "author_url": "https://edabit.com/user/vQEmjTRgmdGNYB7yk",
  "challenge_id": "WkH9rwDnNtDLYAYLp",
  "code": "function getPrimeFactorization(num) {\n  \n}",
  "difficulty": "Hard",
  "instructions": "<p><span>Create a function that returns the prime factorization of a number as a sorted list of arrays. Include the multiplicity of each prime in the arrays:</span></p><ul><li><span>[</span><span>(prime</span><span>_</span><span>0, mult</span><span>_</span><span>0), ..., (prime</span><span>_</span><span>k, mult</span><span>_</span><span>k)]</span></li><li><span>where prime</span><span>_</span><span>0 &lt; prime</span><span>_</span><span>1 &lt; ... &lt; prime</span><span>_</span><span>k</span></li></ul><h3><span>Examples</span></h3><pre><code>getPrimeFactorization(4) \u279e [[2, 2]]\n\ngetPrimeFactorization(10) \u279e [[2, 1], [5, 1]]\n\ngetPrimeFactorization(60) \u279e [[2, 2], [3, 1], [5, 1]]</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't worry about negatives or floats. All inputs will be positive numbers.</span></li><li><span>1 is not a prime! Do not include it. You will not be given 1 as an input.</span></li><li><span>All inputs will be less than 10,000.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/WkH9rwDnNtDLYAYLp",
  "tags": [
    "algorithms",
    "math",
    "numbers"
  ],
  "tests": "Test.assertSimilar(getPrimeFactorization(2), [[2, 1]]);\nTest.assertSimilar(getPrimeFactorization(4), [[2, 2]]);\nTest.assertSimilar(getPrimeFactorization(10), [[2, 1], [5, 1]]);\nTest.assertSimilar(getPrimeFactorization(11), [[11, 1]]);\nTest.assertSimilar(getPrimeFactorization(29), [[29, 1]]);\nTest.assertSimilar(getPrimeFactorization(60), [[2, 2], [3, 1], [5, 1]]);\nTest.assertSimilar(getPrimeFactorization(100), [[2, 2], [5, 2]]);\nTest.assertSimilar(getPrimeFactorization(151), [[151, 1]]);\nTest.assertSimilar(getPrimeFactorization(323), [[17, 1], [19, 1]]);\nTest.assertSimilar(getPrimeFactorization(997), [[997, 1]]);\nTest.assertSimilar(getPrimeFactorization(3349), [[17, 1], [197, 1]]);\nTest.assertSimilar(getPrimeFactorization(5040), [[2, 4], [3, 2], [5, 1], [7, 1]]);\nTest.assertSimilar(getPrimeFactorization(6097), [[7, 1], [13, 1], [67, 1]]);\nTest.assertSimilar(getPrimeFactorization(8192), [[2, 13]]);\nTest.assertSimilar(getPrimeFactorization(9870), [[2, 1], [3, 1], [5, 1], [7, 1], [47, 1]]);\nTest.assertSimilar(getPrimeFactorization(9973), [[9973, 1]]);\nTest.assertSimilar(getPrimeFactorization(9999), [[3, 2], [11, 1], [101, 1]]);",
  "title": "Prime Factorization"
}