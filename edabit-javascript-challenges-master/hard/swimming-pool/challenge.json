{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "gqkan7642aHfjk5GF",
  "code": "function isLegitimate(arr) {\n  \n}",
  "difficulty": "Hard",
  "instructions": "<p><span>Suppose a swimming pool blueprint can be represented as a 2D array, where </span><code>1</code><span>s represent the pool and </span><code>0</code><span>s represent the rest of the backyard.</span></p><pre><code>[[0, 0, 0, 0, 0, 0, 0, 0],\n[0, 1, 1, 1, 1, 1, 0, 0],\n[0, 1, 1, 1, 1, 1, 0, 0],\n[0, 1, 1, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0]]\n// Legitimate</code></pre><p><span>Suppose a pool is considered </span><strong><span>legitimate</span></strong><span> if it does not touch any of the four borders in this 2D array.</span></p><pre><code>[[1, 1, 0, 0, 0, 0, 0, 0],\n[1, 1, 1, 1, 1, 1, 0, 0],\n[0, 1, 1, 1, 1, 1, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0]]\n// Illegitimate! \n// The 1s are touching both the left \"fence\" and the upper \"fence\".</code></pre><p><span>Create a function that returns </span><code>true</code><span> if the pool plan is legitimate, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isLegitimate([\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 1, 0, 0, 0],\n  [0, 1, 1, 1, 1, 1, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0]\n]) \u279e true\n\nisLegitimate([\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 1, 0, 0, 0],\n  [0, 1, 1, 1, 1, 1, 0, 0],\n  [0, 0, 1, 1, 1, 0, 0, 0]\n]) \u279e false\n\nisLegitimate([\n  [0, 0, 0, 0, 0],\n  [0, 1, 1, 1, 0],\n  [0, 1, 1, 1, 0],\n  [0, 0, 0, 0, 0]\n]) \u279e true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
  "source_url": "https://edabit.com/challenge/gqkan7642aHfjk5GF",
  "tags": [
    "arrays",
    "higher_order_functions",
    "validation"
  ],
  "tests": "Test.assertEquals(isLegitimate([\n[0, 0, 0, 0, 0, 0, 0, 0], \n[0, 0, 1, 1, 1, 0, 0, 0], \n[0, 1, 1, 1, 1, 1, 0, 0], \n[0, 0, 0, 0, 0, 0, 0, 0]\n]), true)\n\nTest.assertEquals(isLegitimate([\n[0, 0, 0, 0, 0, 0, 0, 0], \n[0, 0, 1, 1, 1, 0, 0, 0], \n[0, 1, 1, 1, 1, 1, 0, 0], \n[0, 0, 1, 1, 1, 0, 0, 0]\n]), false)\n\nTest.assertEquals(isLegitimate([\n[0, 0, 0, 0, 0], \n[0, 1, 1, 1, 0], \n[0, 1, 1, 1, 0], \n[0, 0, 0, 0, 0]\n]), true)\n\nTest.assertEquals(isLegitimate([\n[0, 0, 0, 0, 0], \n[0, 1, 1, 1, 1], \n[0, 1, 1, 1, 0], \n[0, 0, 0, 0, 0]\n]), false)\n\nTest.assertEquals(isLegitimate([\n[0, 0, 0, 0, 0, 0, 0, 0], \n[0, 1, 1, 1, 1, 1, 0, 0], \n[0, 1, 1, 1, 1, 1, 0, 0], \n[0, 1, 1, 0, 0, 0, 0, 0], \n[0, 0, 0, 0, 0, 0, 0, 0]\n]), true)\n\nTest.assertEquals(isLegitimate([\n[0, 0, 0, 0, 0, 0, 0, 0], \n[0, 1, 1, 1, 1, 1, 0, 0], \n[0, 1, 1, 1, 1, 1, 0, 0], \n[0, 1, 1, 0, 0, 1, 0, 0], \n[0, 1, 1, 1, 1, 1, 0, 0], \n[0, 0, 0, 0, 0, 0, 0, 0]\n]), true)\n\nTest.assertEquals(isLegitimate([\n[0, 0, 0, 0, 0, 0, 0, 0], \n[0, 1, 1, 1, 1, 1, 1, 0], \n[0, 1, 1, 0, 0, 0, 1, 0], \n[0, 1, 0, 0, 0, 1, 1, 0], \n[0, 1, 1, 1, 1, 1, 1, 0], \n[0, 0, 0, 0, 0, 0, 0, 0]\n]), true)\n\nTest.assertEquals(isLegitimate([\n[0, 0, 0, 0, 0, 0, 0, 0], \n[0, 1, 1, 1, 1, 1, 1, 0], \n[0, 1, 1, 0, 0, 0, 1, 0], \n[0, 1, 0, 0, 0, 1, 1, 0], \n[0, 1, 1, 1, 1, 1, 1, 0], \n[0, 0, 0, 0, 0, 0, 0, 1]\n]), false)\n\nTest.assertEquals(isLegitimate([\n[0, 0, 0, 0, 0, 0], \n[0, 1, 1, 1, 1, 1], \n[0, 1, 1, 0, 0, 0], \n[0, 1, 0, 0, 0, 0], \n[0, 1, 1, 1, 1, 0], \n[0, 0, 0, 0, 0, 0]\n]), false)\n\nTest.assertEquals(isLegitimate([\n[0, 0, 0], \n[0, 1, 0], \n[0, 1, 0], \n[0, 1, 0], \n[0, 1, 0], \n[0, 0, 0]\n]), true)\n\nTest.assertEquals(isLegitimate([\n[0, 0, 0], \n[0, 1, 0], \n[0, 1, 0], \n[0, 1, 1], \n[0, 1, 0], \n[0, 0, 0]\n]), false)\n\nTest.assertEquals(isLegitimate([\n[0, 0, 0], \n[0, 1, 0], \n[0, 1, 0], \n[1, 1, 1], \n[0, 1, 0], \n[0, 0, 0]\n]), false)",
  "title": "Swimming Pool"
}