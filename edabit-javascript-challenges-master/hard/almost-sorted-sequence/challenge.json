{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "z9JujCTeTM69ssLZa",
  "code": "function almostSorted(arr) {\n  \n}",
  "difficulty": "Hard",
  "instructions": "<p><span>An </span><strong><span>almost-sorted sequence</span></strong><span> is a sequence that is </span><strong><span>strictly increasing</span></strong><span> or </span><strong><span>strictly decreasing</span></strong><span> if you remove a </span><strong><span>single element</span></strong><span> from the array (no more, no less). Write a function that returns </span><code>true</code><span> if an array is </span><strong><span>almost-sorted</span></strong><span>, and </span><code>false</code><span> otherwise.</span></p><p><span>For example, if you remove </span><code>80</code><span> from the first example, it is perfectly sorted in ascending order. Similarly, if you remove </span><code>7</code><span> from the second example, it is perfectly sorted in descending order.</span></p><h3><span>Examples</span></h3><pre><code>almostSorted([1, 3, 5, 9, 11, 80, 15, 33, 37, 41] ) \u279e true\n\nalmostSorted([6, 5, 4, 7, 3]) \u279e true\n\nalmostSorted([6, 4, 2, 0]) \u279e false\n// Sequence is already sorted.\n\nalmostSorted([7, 8, 9, 3, 10, 11, 12, 2]) \u279e false\n// Requires removal of more than 1 item.</code></pre><h3><span>Notes</span></h3><ul><li><span>Completely sorted arrays should return </span><code>false</code><span>.</span></li><li><span>Arrays will always be </span><strong><span>&gt; 3</span></strong><span> in length (to remove ambiguity).</span></li><li><span>Numbers in each input array will be unique - don't worry about \"ties\".</span></li></ul>",
  "source_url": "https://edabit.com/challenge/z9JujCTeTM69ssLZa",
  "tags": [
    "arrays",
    "sorting",
    "validation"
  ],
  "tests": "Test.assertEquals(almostSorted([1, 3, 5, 9, 11, 80, 15, 33, 37, 41]), true, 'remove 80 should work')\nTest.assertEquals(almostSorted([6, 5, 4, 7, 3]), true, 'remove 7 should work')\nTest.assertEquals(almostSorted([6, 4, 2, 0]), false, 'numbers should not be completely sorted')\nTest.assertEquals(almostSorted([7, 8, 9, 3, 10, 11, 12, 2]), false)\nTest.assertEquals(almostSorted([9, 1, 8, 2]), true, 'remove 1 should work')\nTest.assertEquals(almostSorted([1, 3, 9, 44, 15, 17, 33]), true, 'remove 44 should work')\nTest.assertEquals(almostSorted([5, 4, 3, 2, -1, 0]), true, 'remove -1 should work')\nTest.assertEquals(almostSorted([5, 2, 3, 4]), true, 'remove 5 should work')\nTest.assertEquals(almostSorted([8, 3, 7, 4, 9]), false)\nTest.assertEquals(almostSorted([-3, -4, -5, -7]), false, 'numbers should not be completely sorted')\nTest.assertEquals(almostSorted([5, 6, 7, 8]), false, 'numbers should not be completed sorted')\nTest.assertEquals(almostSorted([9, 1, 8, 2, 7, 3]), false)",
  "title": "Almost Sorted Sequence"
}