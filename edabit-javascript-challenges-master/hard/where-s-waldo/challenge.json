{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "pNNvNZQCz2DmvT59d",
  "code": "function whereIsWaldo(arr) {\n  \n}",
  "difficulty": "Hard",
  "instructions": "<p><span>Return the coordinates (</span><code>[row, col]</code><span>) of the element that differs from the rest.</span></p><h3><span>Examples</span></h3><pre><code>whereIsWaldo([\n  [\"A\", \"A\", \"A\"],\n  [\"A\", \"A\", \"A\"],\n  [\"A\", \"B\", \"A\"]\n]) \u279e [3, 2]\n\nwhereIsWaldo([\n  [\"c\", \"c\", \"c\", \"c\"],\n  [\"c\", \"c\", \"c\", \"d\"]\n]) \u279e [2, 4]\n\nwhereIsWaldo([\n  [\"O\", \"O\", \"O\", \"O\"],\n  [\"O\", \"O\", \"O\", \"O\"],\n  [\"O\", \"O\", \"O\", \"O\"],\n  [\"O\", \"O\", \"O\", \"O\"],\n  [\"P\", \"O\", \"O\", \"O\"],\n  [\"O\", \"O\", \"O\", \"O\"]\n]) \u279e [5, 1]</code></pre><h3><span>Notes</span></h3><p><span>Rows and columns are 1-indexed (</span><strong><span>not zero-indexed</span></strong><span>).</span></p>",
  "source_url": "https://edabit.com/challenge/pNNvNZQCz2DmvT59d",
  "tags": [
    "arrays",
    "functional_programming"
  ],
  "tests": "Test.assertSimilar(whereIsWaldo([\n\t[\"A\", \"A\", \"A\"], \n\t[\"A\", \"A\", \"A\"], \n\t[\"A\", \"B\", \"A\"]\n]), [3, 2])\n\nTest.assertSimilar(whereIsWaldo([\n\t[\"c\", \"c\", \"c\", \"c\"], \n\t[\"c\", \"c\", \"c\", \"d\"]\n]), [2, 4])\n\nTest.assertSimilar(whereIsWaldo([\n\t[\"O\", \"O\", \"O\", \"O\"], \n\t[\"O\", \"O\", \"O\", \"O\"], \n\t[\"O\", \"O\", \"O\", \"O\"], \n\t[\"O\", \"O\", \"O\", \"O\"], \n\t[\"P\", \"O\", \"O\", \"O\"], \n\t[\"O\", \"O\", \"O\", \"O\"]\n]), [5, 1])\n\nTest.assertSimilar(whereIsWaldo([\n\t[\"X\", \"X\", \"Y\", \"X\"], \n\t[\"X\", \"X\", \"X\", \"X\"], \n\t[\"X\", \"X\", \"X\", \"X\"]\n]), [1, 3])",
  "title": "Where's Waldo?"
}