{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "LQvRrzwHzc2BAXBQx",
  "code": "function validate(s) {\n  \n}",
  "difficulty": "Hard",
  "instructions": "<p><span>Write a function that returns </span><code>true</code><span> if the phone number is in a valid format. The valid formats are:</span></p><p><strong><span>With Country Code</span></strong></p><ol><li><code>+1-892-445-7663</code></li><li><code>1-892-445-7663</code></li><li><code>1 (892) 445-7663</code></li><li><code>1.892.567.8901</code></li><li><code>1/892/567/8901</code></li><li><code>1 892 567 8901</code></li><li><code>18925678901</code></li></ol><p><strong><span>Without Country Code</span></strong></p><ol start=\"8\"><li><code>892-445-7663</code></li><li><code>(892) 445-7663</code></li><li><code>892.567.8901</code></li><li><code>892/567/8901</code></li><li><code>892 567 8901</code></li><li><code>8925678901</code></li></ol><h3><span>Examples</span></h3><pre><code>validate(\"578-332-1114\") \u279e true\n\nvalidate(\"57-332-1114\") \u279e false\n\nvalidate(\"577 332  1114\") \u279e false\n# More than one space in between digits clusters.\n\nvalidate(\"57 332 1114\") \u279e false\n# Unacceptable digit cluster length.\n\nvalidate(\"157%332-1114\") \u279e false\n# Unacceptable delimiter.</code></pre><h3><span>Notes</span></h3><ul><li><span>The country code will always be </span><code>+1</code><span> or </span><code>1</code><span>.</span></li><li><span>Each phone number will contain either 10 or 11 digits (depending on whether the country code exists).</span></li><li><span>There must either be exactly one space, a delimiter, or no space at all between the digit clusters.</span></li><li><span>You do not have to worry about extensions.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/LQvRrzwHzc2BAXBQx",
  "tags": [
    "regex",
    "strings",
    "validation"
  ],
  "tests": "Test.assertEquals(validate('+1-892-445-7663'), true)\nTest.assertEquals(validate('1-892-445-7663'), true)\nTest.assertEquals(validate('1 (892) 445-7663'), true)\nTest.assertEquals(validate('1.892.567.8901'), true)\nTest.assertEquals(validate('1/892/567/8901'), true)\nTest.assertEquals(validate('1 892 567 8901'), true)\nTest.assertEquals(validate('18925678901'), true)\n\nTest.assertEquals(validate('892-445-7663'), true)\nTest.assertEquals(validate('(892) 445-7663'), true)\nTest.assertEquals(validate('892.567.8901'), true)\nTest.assertEquals(validate('892/567/8901'), true)\nTest.assertEquals(validate('892 567 8901'), true)\nTest.assertEquals(validate('8925678901'), true)\n\nTest.assertEquals(validate('89-445-7663'), false, 'invalid digit clusters')\nTest.assertEquals(validate('(892) 4454-7663'), false, 'invalid digit clusters')\nTest.assertEquals(validate('892  567 8901'), false, 'additional space')\nTest.assertEquals(validate('892?567?8901'), false, 'invalid delimiter')\nTest.assertEquals(validate('!1-892-567-8901'), false, 'invalid international code')\nTest.assertEquals(validate('(8924) 445-7663'), false, 'invalid digit clusters')\n\nTest.assertEquals(validate('12 892 445-7663'), false, 'invalid international code')\nTest.assertEquals(validate('1&892&445-7663'), false, 'invalid delimiter')\nTest.assertEquals(validate('894-445-766'), false, 'invalid digit clusters')\nTest.assertEquals(validate('894 445 766'), false, 'invalid digit clusters')",
  "title": "Validate Phone Numbers"
}