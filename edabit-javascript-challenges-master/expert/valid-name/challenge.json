{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "xPBFGvKQfRFEyy4vx",
  "code": "function validName(name) {\n  \n}",
  "difficulty": "Expert",
  "instructions": "<p><span>For this exercise, keep in mind the following definitions: </span></p><ol><li><span>A </span><strong><span>term</span></strong><span> is either an </span><strong><span>initials</span></strong><span> or </span><strong><span>word</span></strong><span>.</span></li><li><strong><span>initials</span></strong><span> = 1 character</span></li><li><strong><span>words</span></strong><span> = 2+ characters (no dots allowed)</span></li></ol><p><span>A </span><strong><span>valid name</span></strong><span> is a name written in one of the following ways:</span></p><ul><li><span>H. Wells</span></li><li><span>H. G. Wells</span></li><li><span>Herbert G. Wells</span></li><li><span>Herbert George Wells</span></li></ul><p><span>The following names are </span><strong><span>invalid</span></strong><span>: </span></p><ul><li><span>Herbert  or Wells (single names not allowed)</span></li><li><span>H Wells or H. G Wells (initials must end with dot)</span></li><li><span>h. Wells or H. wells or h. g. Wells (incorrect capitalization)</span></li><li><span>H. George Wells (middle name expanded, while first still left as initial)</span></li><li><span>H. G. W. (last name is not a word)</span></li><li><span>Herb. G. Wells (dot only allowed after initial, not word)</span></li></ul><h3><span>Rules</span></h3><ol><li><span>Both initials and words must be capitalized.</span></li><li><span>Initials must end with a dot.</span></li><li><span>A name must be either 2 or 3 terms long. </span></li><li><span>If the name is 3 words long, you can expand the first and middle name or expand the first name only. You </span><strong><span>cannot</span></strong><span> keep the first name as an initial and expand the middle name only.</span></li><li><span>The last name must be a word (not an initial).</span></li></ol><p><span>Your task is to write a function that determines whether a name is valid or not. Return </span><code>true</code><span> if the name is valid, </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>validName(\"H. Wells\") \u279e true\n\nvalidName(\"H. G. Wells\") \u279e true\n\nvalidName(\"Herbert G. Wells\") \u279e true\n\nvalidName(\"Herbert\") \u279e false\n// Must be 2 or 3 words\n\nvalidName(\"h. Wells\") \u279e false\n// Incorrect capitalization\n\nvalidName(\"H Wells\") \u279e false\n// Missing dot after initial\n\nvalidName(\"H. George Wells\") \u279e false\n// Cannot have: initial first name + word middle name\n\nvalidName(\"H. George W.\") \u279e false\n// Last name cannot be initial\n\nvalidName(\"Herb. George Wells\") \u279e false\n// Words cannot end with a dot (only initials can)</code></pre><h3><span>Notes</span></h3><ul><li><span>A </span><strong><span>term</span></strong><span> is either an </span><strong><span>initial</span></strong><span> or </span><strong><span>word</span></strong><span>. </span></li><li><strong><span>Initials</span></strong><span> and </span><strong><span>words</span></strong><span> are disjoint sets.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/xPBFGvKQfRFEyy4vx",
  "tags": [
    "conditions",
    "regex"
  ],
  "tests": "Test.assertEquals(validName(\"H. Wells\"), true)\nTest.assertEquals(validName(\"H. G. Wells\"), true)\nTest.assertEquals(validName(\"Herbert G. Wells\"), true)\nTest.assertEquals(validName(\"Herbert George Wells\"), true)\nTest.assertEquals(validName(\"Herbert\"), false, 'Name must be 2 or 3 words.')\nTest.assertEquals(validName(\"Herbert W. G. Wells\"), false, 'Name must be 2 or 3 words')\nTest.assertEquals(validName(\"h. Wells\"), false, 'Incorrect Capitalization.')\nTest.assertEquals(validName(\"herbert G. Wells\"), false, 'Incorrect Capitalization.')\nTest.assertEquals(validName(\"H Wells\"), false, 'Initials must end with a dot.')\nTest.assertEquals(validName(\"Herb. Wells\"), false, 'Words cannot end with a dot.')\nTest.assertEquals(validName(\"H. George Wells\"), false, 'First name is initial but middle name is word.')\nTest.assertEquals(validName(\"Herbert George W.\"), false, 'Last name cannot be an initial.')",
  "title": "Valid Name"
}