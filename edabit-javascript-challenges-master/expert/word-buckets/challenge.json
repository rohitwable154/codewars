{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "Q7foiyejfJG6pqqws",
  "code": "function bucketize(phrase, n) {\n  \n}",
  "difficulty": "Expert",
  "instructions": "<p><span>Write a function that divides a phrase into word buckets, with each bucket containing </span><strong><span>n or fewer characters</span></strong><span>. Only include </span><strong><span>full words</span></strong><span> inside each bucket.</span></p><h3><span>Examples</span></h3><pre><code>bucketize(\"she sells sea shells by the sea\", 10)\n\u279e [\"she sells\", \"sea shells\", \"by the sea\"]\n\nbucketize(\"the mouse jumped over the cheese\", 7)\n\u279e [\"the\", \"mouse\", \"jumped\", \"over\", \"the\", \"cheese\"]\n\nbucketize(\"fairy dust coated the air\", 20)\n\u279e [\"fairy dust coated\", \"the air\"]\n\nbucketize(\"a b c d e\", 2)\n\u279e [\"a\", \"b\", \"c\", \"d\", \"e\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Spaces count as </span><strong><span>one character</span></strong><span>.</span></li><li><span>Trim beginning and end spaces for each word bucket (see final example).</span></li><li><span>If buckets are too small to hold a single word, return an </span><strong><span>empty array</span></strong><span>.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/Q7foiyejfJG6pqqws",
  "tags": [
    "control_flow",
    "strings"
  ],
  "tests": "Test.assertSimilar(bucketize(\"she sells sea shells by the sea\", 2), [])\nTest.assertSimilar(bucketize(\"ab bc cd\", 1), [])\nTest.assertSimilar(bucketize(\"she sells sea shells by the sea\", 10), [\"she sells\", \"sea shells\", \"by the sea\"])\nTest.assertSimilar(bucketize(\"the mouse jumped over the cheese\", 7), [\"the\", \"mouse\", \"jumped\", \"over\", \"the\", \"cheese\"])\nTest.assertSimilar(bucketize(\"fairy dust coated the air\", 20), [\"fairy dust coated\", \"the air\"])\nTest.assertSimilar(bucketize(\"do the hokey pokey\", 6), [\"do the\", \"hokey\", \"pokey\"])\nTest.assertSimilar(bucketize(\"do the hokey pokey\", 12), [\"do the hokey\", \"pokey\"])\nTest.assertSimilar(bucketize(\"rich magnificent trees dotted the landscape\", 12), [\"rich\", \"magnificent\", \"trees dotted\", \"the\", \"landscape\"])\nTest.assertSimilar(bucketize(\"rich magnificent trees dotted the landscape\", 15), [\"rich\", \"magnificent\", \"trees dotted\", \"the landscape\"])\nTest.assertSimilar(bucketize(\"rich magnificent trees dotted the landscape\", 18), [\"rich magnificent\", \"trees dotted the\", \"landscape\"])\nTest.assertSimilar(bucketize(\"rich magnificent trees dotted the landscape\", 22), [\"rich magnificent trees\", \"dotted the landscape\"])\nTest.assertSimilar(bucketize(\"rich magnificent trees dotted the landscape\", 40), [\"rich magnificent trees dotted the\", \"landscape\"])\nTest.assertSimilar(bucketize(\"rich magnificent trees dotted the landscape\", 43), [\"rich magnificent trees dotted the landscape\"])\nTest.assertSimilar(bucketize(\"beep bo bee bop bee bo bo bop\", 6), [\"beep\", \"bo bee\", \"bop\", \"bee bo\", \"bo bop\"])\nTest.assertSimilar(bucketize(\"beep bo bee bop bee bo bo bop\", 10), [\"beep bo\", \"bee bop\", \"bee bo bo\", \"bop\"])\nTest.assertSimilar(bucketize(\"a b c d e\", 3), [\"a b\", \"c d\", \"e\"])\nTest.assertSimilar(bucketize(\"a b c d e\", 2), [\"a\", \"b\", \"c\", \"d\", \"e\"])\nTest.assertSimilar(bucketize(\"a b c d e\", 1), [\"a\", \"b\", \"c\", \"d\", \"e\"])\nTest.assertSimilar(bucketize(\"a b c d e\", 2), [\"a\", \"b\", \"c\", \"d\", \"e\"])\nTest.assertSimilar(bucketize(\"a b c d e\", 1), [\"a\", \"b\", \"c\", \"d\", \"e\"])",
  "title": "Word Buckets"
}