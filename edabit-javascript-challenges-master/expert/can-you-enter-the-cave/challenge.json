{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "CP5zy4iLZzNy2KFcN",
  "code": "function canEnterCave(x) {\n  \n}",
  "difficulty": "Expert",
  "instructions": "<p><span>You are playing a video game. Your screen can be represented as a 2D array, where </span><code>0</code><span>s represent </span><strong><span>walkeable areas</span></strong><span> and </span><code>1</code><span>s represent </span><strong><span>unwalkeable areas</span></strong><span>. You are currently searching for the entrance to a cave that is located on the right side of the screen. Your character starts anywhere in the leftmost column.</span></p><p><span>Create a function that determines if you can enter the cave. You can only move left, right, up, or down (not allowed to move diagonally).</span></p><p><span>To illustrate:</span></p><pre><code>[\n  [0, 0, 1, 1, 1, 0, 0, 0],\n  [0, 0, 0, 0, 1, 0, 0, 0],\n  [0, 0, 1, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 1, 1, 1, 0]\n]</code></pre><p><span>You found the entrance! Function should output </span><code>true</code><span>.</span></p><pre><code>[\n  [0, 0, 0, 1, 0, 0, 0, 0],\n  [0, 0, 0, 1, 1, 0, 0, 0],\n  [0, 0, 0, 0, 1, 1, 0, 0],\n  [0, 0, 0, 1, 1, 1, 1, 0]\n]</code></pre><p><span>Nope, keep looking. Function should output </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>canEnterCave([\n  [0, 1, 1, 1, 0, 1, 1, 0],\n  [0, 0, 1, 1, 0, 0, 0, 0],\n  [0, 0, 0, 0, 1, 1, 1, 0],\n  [0, 1, 1, 1, 1, 1, 1, 0]\n]) \u279e false\n\n// You cannot walk diagonally!\n\ncanEnterCave([\n  [0, 1, 1, 1, 0, 1, 1, 0],\n  [0, 0, 1, 1, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 1, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 0]\n]) \u279e true\n\ncanEnterCave([\n  [0, 1, 1, 1, 1, 1, 1, 0],\n  [0, 0, 0, 0, 1, 0, 0, 0],\n  [0, 0, 1, 1, 1, 1, 1, 0],\n  [0, 1, 1, 0, 0, 1, 1, 0]\n]) \u279e false</code></pre><h3><span>Notes</span></h3><ul><li><span>You are seeing the game screen from a birds-eye view. </span></li><li><span>Another way of thinking about it: You can enter the cave if you can move from the </span><strong><span>left</span></strong><span> side of the screen to the </span><strong><span>right</span></strong><span> side by only walking up, down or right.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/CP5zy4iLZzNy2KFcN",
  "tags": [
    "arrays",
    "functional_programming",
    "games"
  ],
  "tests": "Test.assertEquals(canEnterCave([\n[0, 0, 1, 1, 1, 0, 0, 0], \n[0, 0, 0, 0, 1, 0, 0, 0], \n[0, 0, 1, 0, 0, 0, 0, 0], \n[0, 0, 1, 1, 1, 1, 1, 0]\n]), true)\n\nTest.assertEquals(canEnterCave([\n[0, 0, 0, 1, 0, 0, 0, 0], \n[0, 0, 0, 1, 1, 0, 0, 0], \n[0, 0, 0, 0, 1, 1, 0, 0], \n[0, 0, 0, 1, 1, 1, 1, 0]\n]), false)\n\nTest.assertEquals(canEnterCave([\n[0, 1, 1, 1, 0, 1, 1, 0], \n[0, 0, 1, 1, 0, 0, 0, 0], \n[0, 0, 0, 0, 0, 1, 0, 0], \n[0, 1, 1, 1, 1, 1, 1, 0]\n]), true)\n\nTest.assertEquals(canEnterCave([\n[0, 1, 1, 1, 0, 1, 1, 0], \n[0, 0, 1, 1, 0, 0, 0, 0], \n[0, 0, 0, 1, 0, 1, 0, 0], \n[0, 1, 1, 1, 1, 1, 1, 0]\n]), false)\n\nTest.assertEquals(canEnterCave([\n[0, 1, 1, 1, 0, 1, 1, 0], \n[0, 0, 1, 1, 0, 0, 0, 0], \n[0, 0, 0, 0, 1, 1, 1, 0], \n[0, 1, 1, 1, 1, 1, 1, 0]\n]), false)\n\nTest.assertEquals(canEnterCave([\n[0, 1, 1, 1, 1, 1, 1, 0], \n[0, 0, 0, 0, 0, 0, 0, 0], \n[0, 0, 0, 0, 0, 1, 1, 0], \n[0, 1, 1, 0, 0, 1, 1, 0]\n]), true)\n\nTest.assertEquals(canEnterCave([\n[0, 1, 1, 1, 1, 1, 1, 0], \n[0, 0, 0, 0, 1, 0, 0, 0], \n[0, 0, 1, 1, 1, 1, 1, 0], \n[0, 1, 1, 0, 0, 1, 1, 0]\n]), false)\n\nTest.assertEquals(canEnterCave([\n[0, 1, 1, 1, 1, 1, 1, 0], \n[0, 1, 0, 0, 1, 0, 0, 0], \n[0, 0, 1, 0, 1, 1, 1, 0], \n[0, 1, 1, 0, 0, 1, 1, 0]\n]), false)\n\nTest.assertEquals(canEnterCave([\n[0, 1, 1, 1, 1, 1, 1, 1], \n[0, 0, 0, 0, 1, 0, 0, 1], \n[0, 0, 1, 0, 1, 0, 0, 0], \n[0, 1, 1, 0, 0, 0, 1, 0]\n]), true)\n\nTest.assertEquals(canEnterCave([\n[1, 0, 0, 0, 0, 0, 1, 0, 0], \n[1, 0, 1, 1, 1, 0, 1, 0, 1], \n[1, 0, 1, 0, 0, 0, 1, 0, 1], \n[1, 0, 1, 0, 1, 1, 1, 0, 1],\n[0, 0, 1, 0, 0, 0, 0, 0, 1]\n]), true)",
  "title": "Can You Enter the Cave?"
}