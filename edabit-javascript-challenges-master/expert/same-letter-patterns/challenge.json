{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "6NJrx5nPBX6uRS4qJ",
  "code": "function sameLetterPattern(str1, str2) {\n  \n}",
  "difficulty": "Expert",
  "instructions": "<p><span>Create a function that returns </span><code>true</code><span> if two strings share the same letter pattern, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>sameLetterPattern(\"ABAB\", \"CDCD\") \u279e true\n\nsameLetterPattern(\"ABCBA\", \"BCDCB\") \u279e true\n\nsameLetterPattern(\"FFGG\", \"CDCD\") \u279e false\n\nsameLetterPattern(\"FFFF\", \"ABCD\") \u279e false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
  "source_url": "https://edabit.com/challenge/6NJrx5nPBX6uRS4qJ",
  "tags": [
    "regex",
    "strings",
    "validation"
  ],
  "tests": "Test.assertEquals(sameLetterPattern('ABAB', 'CDCD'), true)\nTest.assertEquals(sameLetterPattern('AAABBB', 'CCCDDD'), true)\nTest.assertEquals(sameLetterPattern('ABCBA', 'BCDCB'), true)\nTest.assertEquals(sameLetterPattern('AAAA', 'BBBB'), true)\nTest.assertEquals(sameLetterPattern('BAAB', 'ABBA'), true)\nTest.assertEquals(sameLetterPattern('BAAB', 'QZZQ'), true)\nTest.assertEquals(sameLetterPattern('TTZZVV', 'PPSSBB'), true)\nTest.assertEquals(sameLetterPattern('ZYX', 'ABC'), true)\nTest.assertEquals(sameLetterPattern('AABAA', 'SSCSS'), true)\nTest.assertEquals(sameLetterPattern('AABAABAA', 'SSCSSCSS'), true)\nTest.assertEquals(sameLetterPattern('UBUBUBUB', 'WEWEWEWE'), true)\nTest.assertEquals(sameLetterPattern('FFGG', 'FFG'), false)\nTest.assertEquals(sameLetterPattern('FFGG', 'CDCD'), false)\nTest.assertEquals(sameLetterPattern('FFFG', 'GGHI'), false)\nTest.assertEquals(sameLetterPattern('FFFF', 'ABCD'), false)\nTest.assertEquals(sameLetterPattern('ABCA', 'ABCD'), false)\nTest.assertEquals(sameLetterPattern('ABCAAA', 'DDABCD'), false)",
  "title": "Same Letter Patterns"
}