{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "YFkyAh5sm9Guqth85",
  "code": "function cannotCapture(board) {\n  \n}",
  "difficulty": "Expert",
  "instructions": "<p><span>Write a function that returns </span><code>true</code><span> if the knights are placed on a chessboard such that </span><strong><span>no knight can capture another knight</span></strong><span>. Here, </span><code>0</code><span>s represent empty squares and </span><code>1</code><span>s represent knights.</span></p><h3><span>Examples</span></h3><pre><code>cannotCapture([\n  [0, 0, 0, 1, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0, 1, 0, 0],\n  [0, 0, 0, 0, 1, 0, 1, 0],\n  [0, 1, 0, 0, 0, 1, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0, 0, 0, 1],\n  [0, 0, 0, 0, 1, 0, 0, 0]\n]) \u279e true\n\ncannotCapture([\n  [1, 0, 1, 0, 1, 0, 1, 0],\n  [0, 1, 0, 1, 0, 1, 0, 1],\n  [0, 0, 0, 0, 1, 0, 1, 0],\n  [0, 0, 1, 0, 0, 1, 0, 1],\n  [1, 0, 0, 0, 1, 0, 1, 0],\n  [0, 0, 0, 0, 0, 1, 0, 1],\n  [1, 0, 0, 0, 1, 0, 1, 0],\n  [0, 0, 0, 1, 0, 1, 0, 1]\n]) \u279e false</code></pre><h3><span>Notes</span></h3><ul><li><span>Knights can be present in any of the 64 squares.</span></li><li><span>No other pieces except knights exist.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/YFkyAh5sm9Guqth85",
  "tags": [
    "arrays",
    "games",
    "validation"
  ],
  "tests": "Test.assertEquals(cannotCapture([\n[0, 0, 0, 1, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0],\n[0, 1, 0, 0, 0, 1, 0, 0],\n[0, 0, 0, 0, 1, 0, 1, 0],\n[0, 1, 0, 0, 0, 1, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0],\n[0, 1, 0, 0, 0, 0, 0, 1],\n[0, 0, 0, 0, 1, 0, 0, 0]\n]), true)\n\nTest.assertEquals(cannotCapture([\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 1, 0, 1, 0, 1, 0, 1],\n[0, 0, 1, 0, 1, 0, 1, 0],\n[0, 0, 0, 1, 0, 1, 0, 1],\n[0, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 0, 0, 0, 1, 0, 1],\n[0, 0, 0, 0, 0, 0, 1, 0],\n[0, 0, 0, 0, 0, 0, 0, 1]\n]), true)\n\nTest.assertEquals(cannotCapture([\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 1, 0, 1, 0, 1, 0, 1],\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 0, 0, 1, 0, 1, 0, 1],\n[1, 0, 0, 0, 1, 0, 1, 0],\n[1, 0, 0, 0, 0, 1, 0, 1],\n[1, 0, 0, 0, 0, 0, 1, 0],\n[1, 0, 0, 0, 0, 0, 0, 1]\n]), true)\n\nTest.assertEquals(cannotCapture([\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 1, 0, 1, 0, 1, 0, 1],\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 0, 0, 1, 0, 1, 0, 1],\n[1, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 0, 0, 0, 1, 0, 1],\n[1, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 0, 1, 0, 1, 0, 1]\n]), true)\n\nTest.assertEquals(cannotCapture([\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 1, 0, 1, 0, 1, 0, 1],\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 0, 0, 1, 0, 1, 0, 1],\n[1, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 0, 0, 0, 1, 0, 1],\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 0, 0, 1, 0, 0, 0, 1]\n]), true)\n\nTest.assertEquals(cannotCapture([\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 1, 0, 1, 0, 1, 0, 1],\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 0, 0, 1, 0, 1, 0, 1],\n[1, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 0, 0, 0, 1, 0, 1],\n[1, 0, 1, 0, 1, 0, 1, 0],\n[1, 0, 0, 1, 0, 0, 0, 1]\n]), false)\n\nTest.assertEquals(cannotCapture([\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 1, 0, 1, 0, 1, 0, 1],\n[1, 0, 1, 0, 1, 1, 1, 0],\n[0, 0, 0, 1, 0, 1, 0, 1],\n[1, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 0, 0, 0, 1, 0, 1],\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 0, 0, 1, 0, 0, 0, 1]\n]), false)\n\nTest.assertEquals(cannotCapture([\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 1, 0, 1, 0, 1, 0, 1],\n[0, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 1, 0, 0, 1, 0, 1],\n[1, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 0, 0, 0, 1, 0, 1],\n[1, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 0, 1, 0, 1, 0, 1]\n]), false)\n\nTest.assertEquals(cannotCapture([\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 1, 0, 1, 0, 1, 0, 1],\n[0, 0, 0, 0, 1, 1, 1, 0],\n[0, 0, 0, 0, 0, 0, 0, 1],\n[1, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 0, 0, 0, 1, 0, 1],\n[1, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 0, 1, 0, 1, 0, 1]\n]), false)\n\nTest.assertEquals(cannotCapture([\n[1, 0, 1, 0, 1, 0, 1, 0],\n[0, 1, 0, 1, 0, 1, 0, 1],\n[0, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 0, 0, 0, 0, 0, 1],\n[1, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 0, 0, 0, 1, 0, 1],\n[1, 0, 0, 0, 1, 0, 1, 0],\n[0, 0, 1, 1, 0, 1, 0, 1]\n]), false)\n\nTest.assertEquals(cannotCapture([\n[0, 0, 0, 1, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0],\n[0, 1, 0, 0, 0, 1, 1, 0],\n[0, 0, 0, 0, 1, 0, 1, 0],\n[0, 1, 0, 0, 0, 1, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0],\n[0, 1, 0, 0, 0, 0, 0, 1],\n[0, 0, 0, 0, 1, 0, 0, 0]\n]), false)",
  "title": "Knights on a Board"
}