{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "T9nCQgLQJ9Pi9a9kH",
  "code": "function nthSmallest(arr, n) {\n  \n}",
  "difficulty": "Very Easy",
  "instructions": "<p><span>Given an unsorted array, create a function that returns the </span><strong><span>nth</span></strong><span> smallest element (the smallest element is the </span><strong><span>first smallest</span></strong><span>, the second smallest element is the </span><strong><span>second smallest</span></strong><span>, etc).</span></p><h3><span>Examples</span></h3><pre><code>nthSmallest([1, 3, 5, 7], 1) \u279e 1\n\nnthSmallest([1, 3, 5, 7], 3) \u279e 5\n\nnthSmallest([1, 3, 5, 7], 5) \u279e null\n\nnthSmallest([7, 3, 5, 1], 2) \u279e 3</code></pre><h3><span>Notes</span></h3><ul><li><strong><span>n &gt;= 1 </span></strong></li><li><span>The array does not have to be ordered.</span></li><li><span>Each number in the array will be distinct - there will be a clear ordering.</span></li><li><span>Given an out of bounds parameter (e.g. an array is of size </span><strong><span>k</span></strong><span>), and you are asked to find the </span><strong><span>m &gt; k</span></strong><span> smallest element, return </span><code>null</code><span>.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/T9nCQgLQJ9Pi9a9kH",
  "tags": [
    "arrays"
  ],
  "tests": "Test.assertEquals(nthSmallest([1, 3, 5, 7], 1), 1)\nTest.assertEquals(nthSmallest([1, 3, 5, 7], 3), 5)\nTest.assertEquals(nthSmallest([1, 3, 5, 7], 5), null)\nTest.assertEquals(nthSmallest([7, 3, 5, 1], 2), 3)\nTest.assertEquals(nthSmallest([5, 4, 3, 2, 1, -3], 1), -3)\nTest.assertEquals(nthSmallest([5, 4, 3, 2, 1, -3], 5), 4)\nTest.assertEquals(nthSmallest([4, 5], 3), null)\nTest.assertEquals(nthSmallest([4, 5], 2), 5)\nTest.assertEquals(nthSmallest([4, 5], 1), 4)",
  "title": "Nth Smallest Element"
}