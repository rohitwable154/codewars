{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "rGTJckjQsBDq2M8WL",
  "code": "function sudokuValidator(x) {\n  \n}",
  "difficulty": "Very Hard",
  "instructions": "<p><span>Write a </span><strong><span>sudoku validator</span></strong><span>. This function should return </span><code>true</code><span> if the 2-D array represents a valid sudoku and </span><code>false</code><span> otherwise. To be a valid sudoku:</span></p><ol><li><span>Each row must have the digits from 1 to 9 exactly once.</span></li><li><span>Each column must have the digits from 1 to 9 exactly once.</span></li><li><span>Each 3x3 box must have the digits from 1 to 9 exactly once.</span></li></ol><h3><span>Examples</span></h3><pre><code>sudokuValidator([\n  [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ]\n]) \u279e true\n\nsudokuValidator([\n  [ 1, 1, 2, 4, 8, 9, 3, 7, 6 ],\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ]\n]) \u279e false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
  "source_url": "https://edabit.com/challenge/rGTJckjQsBDq2M8WL",
  "tags": [
    "functional_programming",
    "higher_order_functions",
    "validation"
  ],
  "tests": "// Validate 3 x 3 Boxes\nTest.assertEquals(sudokuValidator(\n[ [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\n  [ 4, 6, 5, 3, 7, 1, 2, 9, 8 ],\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\n  [ 8, 9, 1, 7, 6, 3, 4, 2, 5 ],\n  [ 2, 4, 6, 5, 9, 8, 7, 1, 3 ],\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\n  [ 6, 2, 8, 9, 4, 5, 1, 3, 7 ],\n  [ 5, 7, 3, 8, 1, 2, 9, 6, 4 ] ]), \nfalse)\n\n//\nTest.assertEquals(sudokuValidator(\n[ [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ] ]), \ntrue)\n\nTest.assertEquals(sudokuValidator(\n[ [ 8, 2, 7, 1, 5, 4, 3, 9, 6 ],\n  [ 9, 6, 5, 3, 2, 7, 1, 4, 8 ],\n  [ 3, 4, 1, 6, 8, 9, 7, 5, 2 ],\n  [ 5, 9, 3, 4, 6, 8, 2, 7, 1 ],\n  [ 4, 7, 2, 5, 1, 3, 6, 8, 9 ],\n  [ 6, 1, 8, 9, 7, 2, 4, 3, 5 ],\n  [ 7, 8, 6, 2, 3, 5, 9, 1, 4 ],\n  [ 1, 5, 4, 7, 9, 6, 8, 2, 3 ],\n  [ 2, 3, 9, 8, 4, 1, 5, 6, 7 ] ]), \ntrue)\nTest.assertEquals(sudokuValidator(\n[ [ 8, 2, 7, 1, 5, 4, 3, 9, 6 ],\n  [ 9, 6, 5, 3, 2, 7, 1, 4, 8 ],\n  [ 3, 4, 1, 6, 8, 9, 7, 5, 2 ],\n  [ 5, 9, 3, 4, 6, 8, 2, 7, 1 ],\n  [ 4, 7, 2, 5, 1, 5, 6, 8, 9 ],\n  [ 6, 1, 8, 9, 7, 2, 4, 3, 5 ],\n  [ 7, 8, 6, 2, 3, 5, 9, 1, 4 ],\n  [ 1, 5, 4, 7, 9, 6, 8, 2, 3 ],\n  [ 2, 3, 9, 8, 4, 1, 5, 6, 7 ] ]), \nfalse)\n\nTest.assertEquals(sudokuValidator(\n[ [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\n  [ 3, 3, 9, 2, 5, 6, 8, 4, 1 ],\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ] ]), \nfalse)\n\n\n\n// Additional Tests \nTest.assertEquals(sudokuValidator(\n[ [ 5, 3, 4, 6, 7, 8, 9, 1, 2 ],\n  [ 6, 7, 2, 1, 9, 5, 3, 4, 8 ],\n  [ 1, 9, 8, 3, 4, 2, 5, 6, 7 ],\n  [ 8, 5, 9, 7, 6, 1, 4, 2, 3 ],\n  [ 4, 2, 6, 8, 5, 3, 7, 9, 1 ],\n  [ 7, 1, 3, 9, 2, 4, 8, 5, 6 ],\n  [ 9, 6, 1, 5, 3, 7, 2, 8, 4 ],\n  [ 2, 8, 7, 4, 1, 9, 6, 3, 5 ],\n  [ 3, 4, 5, 2, 8, 6, 1, 7, 9 ] ]), \ntrue)\n\nTest.assertEquals(sudokuValidator(\n[ [ 1, 5, 2, 4, 6, 9, 3, 7, 8 ],\n  [ 7, 8, 9, 2, 1, 3, 4, 5, 6 ],\n  [ 4, 3, 6, 5, 8, 7, 2, 9, 1 ],\n  [ 6, 1, 3, 8, 7, 2, 5, 4, 9 ],\n  [ 9, 7, 4, 1, 5, 6, 8, 2, 3 ],\n  [ 8, 2, 5, 9, 3, 4, 1, 6, 7 ],\n  [ 5, 6, 7, 3, 4, 8, 9, 1, 2 ],\n  [ 2, 4, 8, 6, 9, 1, 7, 3, 5 ],\n  [ 3, 9, 1, 7, 2, 5, 6, 8, 4 ] ]), \ntrue)\n\nTest.assertEquals(sudokuValidator(\n[ [ 2, 5, 1, 4, 6, 9, 3, 7, 8 ],\n  [ 7, 8, 9, 2, 1, 3, 4, 5, 6 ],\n  [ 4, 3, 6, 5, 8, 7, 2, 9, 1 ],\n  [ 6, 1, 3, 8, 7, 2, 5, 4, 9 ],\n  [ 9, 7, 4, 1, 5, 6, 8, 2, 3 ],\n  [ 8, 2, 5, 9, 3, 4, 1, 6, 7 ],\n  [ 5, 6, 7, 3, 4, 8, 9, 1, 2 ],\n  [ 2, 4, 8, 6, 9, 1, 7, 3, 5 ],\n  [ 3, 9, 1, 7, 2, 5, 6, 8, 4 ] ]), \nfalse)\n\nTest.assertEquals(sudokuValidator(\n[ [ 5, 3, 4, 6, 7, 8, 9, 1, 2 ],\n  [ 6, 7, 2, 1, 9, 5, 3, 4, 8 ],\n  [ 1, 9, 8, 3, 4, 2, 5, 6, 7 ],\n  [ 8, 5, 9, 7, 6, 1, 4, 2, 3 ],\n  [ 4, 2, 6, 8, 5, 3, 7, 9, 1 ],\n  [ 7, 1, 3, 2, 9, 4, 8, 5, 6 ],\n  [ 9, 6, 1, 5, 3, 7, 2, 8, 4 ],\n  [ 2, 8, 7, 4, 1, 9, 6, 3, 5 ],\n  [ 3, 4, 5, 2, 8, 6, 1, 7, 9 ] ]), \nfalse)\n\nTest.assertEquals(sudokuValidator(\n[ [ 1, 3, 4, 6, 7, 8, 9, 1, 2 ],\n  [ 6, 7, 2, 1, 9, 5, 3, 4, 8 ],\n  [ 5, 9, 8, 3, 4, 2, 5, 6, 7 ],\n  [ 8, 5, 9, 7, 6, 1, 4, 2, 3 ],\n  [ 4, 2, 6, 8, 5, 3, 7, 9, 1 ],\n  [ 7, 1, 3, 9, 2, 4, 8, 5, 6 ],\n  [ 9, 6, 1, 5, 3, 7, 2, 8, 4 ],\n  [ 2, 8, 7, 4, 1, 9, 6, 3, 5 ],\n  [ 3, 4, 5, 2, 8, 6, 1, 7, 9 ] ]), \nfalse)",
  "title": "Sudoku Validation"
}