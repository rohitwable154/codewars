{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "Hr6HTn3ngCbmJayd4",
  "code": "function final(r, c, i) {\n  \n}",
  "difficulty": "Very Hard",
  "instructions": "<p><span>Write a function that takes in three parameters: </span><code>r, c, i</code><span>, where:</span></p><ul><li><code>r</code><span> and </span><code>c</code><span> are the number of </span><strong><span>rows</span></strong><span> and </span><strong><span>columns</span></strong><span> to initialize a zero matrix.</span></li><li><code>i</code><span> represents the </span><strong><span>list of incrementing operations</span></strong><span> (+1).</span></li></ul><p><span>And returns the resulting matrix after applying all the increment operations. Each increment operation will </span><strong><span>add 1</span></strong><span> to the rows or columns specified in the </span><strong><span>incrementing list</span></strong><span>.</span></p><p><span>To illustrate:</span></p><pre><code>final(3, 3, [\"2r\", \"2c\", \"1r\", \"0c\"])\n\n# Initialize a 3 x 3 matrix of zeroes.\n\n[\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0]\n]\n\n# Apply \"2r\" (increment index 2 row).\n\n[\n  [0, 0, 0],\n  [0, 0, 0],\n  [1, 1, 1]\n]\n\n# Apply \"2c\" (increment index 2 column).\n\n[\n  [0, 0, 1],\n  [0, 0, 1],\n  [1, 1, 2]\n]\n\n# Apply \"1r\" (increment index 1 row).\n\n[\n  [0, 0, 1],\n  [1, 1, 2],\n  [1, 1, 2]\n]\n\n# Apply \"0c\" (increment index 0 column).\n# This is the result you should return.\n\n[\n  [1, 0, 1],\n  [2, 1, 2],\n  [2, 1, 2]\n]</code></pre><h3><span>Examples</span></h3><pre><code>final(2, 2, [\"0r\", \"0r\", \"0r\", \"1c\"]) \u279e [\n  [3, 4],\n  [0, 1]\n]\n\nfinal(2, 2, [\"0c\"]) \u279e [\n  [1, 0],\n  [1, 0]\n]\n\nfinal(3, 3, [\"1c\", \"2c\", \"2c\", \"3c\", \"3c\", \"3c\"]) \u279e [\n    [1, 2, 3],\n    [1, 2, 3],\n    [1, 2, 3]\n]\n\nfinal(3, 3, []) \u279e [\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0]\n]</code></pre><h3><span>Notes</span></h3><ul><li><span>The 2D matrix is 0-indexed.</span></li><li><span>The matrix created will have at least one row and one column.</span></li><li><span>All </span><strong><span>increment operations</span></strong><span>  will be exactly </span><code>+1</code><span>.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/Hr6HTn3ngCbmJayd4",
  "tags": [
    "arrays",
    "higher_order_functions"
  ],
  "tests": "Test.assertSimilar(final(2, 2, ['0r', '0r', '0r', '1c']), [\n[3, 4], \n[0, 1]\n])\n\nTest.assertSimilar(final(2, 2, ['0c']), [\n[1, 0], \n[1, 0]\n])\n\nTest.assertSimilar(final(3, 3, ['0c', '1c', '1c', '2c', '2c', '2c']), [\n[1, 2, 3], \n[1, 2, 3], \n[1, 2, 3]\n])\n\nTest.assertSimilar(final(3, 3, [\"2r\", \"2c\", \"1r\", \"0c\"]), [\n[1, 0, 1], \n[2, 1, 2], \n[2, 1, 2]\n])\n\nTest.assertSimilar(final(1, 1, []), [[0]])\n\nTest.assertSimilar(final(3, 3, ['0r', '2c', '1r', '2c', '1c', '1r', '1r']), [\n[1, 2, 3], \n[3, 4, 5], \n[0, 1, 2]\n])\n\nTest.assertSimilar(final(3, 3, []), [\n[0, 0, 0], \n[0, 0, 0], \n[0, 0, 0]\n])\n\nTest.assertSimilar(final(3, 4, ['1r', '1r', '1r', '3c', '3c', '3c']), [\n[0, 0, 0, 3], \n[3, 3, 3, 6], \n[0, 0, 0, 3]\n])\n\nTest.assertSimilar(final(10, 1, ['1r', '2r', '3r', '0c']), [\n[1], \n[2], \n[2], \n[2], \n[1], \n[1], \n[1], \n[1], \n[1], \n[1]\n])\n\nTest.assertSimilar(final(2, 5, ['1r', '1r', '1r', '1c', '0c', '0c', '1r', '0c', '1r', '0c']), [\n[4, 1, 0, 0, 0], \n[9, 6, 5, 5, 5]\n])",
  "title": "Incrementing Rows and Columns"
}