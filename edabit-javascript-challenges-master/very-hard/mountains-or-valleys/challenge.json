{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "LgfitGtQZTJBNbsCQ",
  "code": "function landscapeType(arr) {\n  \n}",
  "difficulty": "Very Hard",
  "instructions": "<p><span>A </span><strong><span>mountain</span></strong><span> is an array with </span><strong><span>exactly one peak</span></strong><span>.</span></p><ul><li><span>All numbers to the left of the </span><strong><span>peak</span></strong><span> are increasing.</span></li><li><span>All numbers to the right of the </span><strong><span>peak</span></strong><span> are decreasing.</span></li><li><span>The peak CANNOT be on the boundary.</span></li></ul><p><span>A </span><strong><span>valley</span></strong><span> is an array with </span><strong><span>exactly one trough</span></strong><span>.</span></p><ul><li><span>All numbers to the left of the </span><strong><span>trough</span></strong><span> are decreasing.</span></li><li><span>All numbers to the right of the </span><strong><span>trough</span></strong><span> are increasing.</span></li><li><span>The trough CANNOT be on the boundary.</span></li></ul><p><span>Some examples of </span><strong><span>mountains</span></strong><span> and </span><strong><span>valleys</span></strong><span>:</span></p><pre><code>Mountain A:  [1, 3, 5, 4, 3, 2]   // 5 is the peak\nMountain B:  [-1, 0, -1]   // 0 is the peak\nMountain B:  [-1, -1, 0, -1, -1]   // 0 is the peak (plateau on both sides is okay)\n\nValley A: [10, 9, 8, 7, 2, 3, 4, 5]   // 2 is the trough\nValley B: [350, 100, 200, 400, 700]  // 100 is the trough</code></pre><p><span>Neither </span><strong><span>mountains</span></strong><span> nor </span><strong><span>valleys</span></strong><span>:</span></p><pre><code>Landscape A: [1, 2, 3, 2, 4, 1]  // 2 peaks (3, 4), not 1\nLandscape B: [5, 4, 3, 2, 1]  // Peak cannot be a boundary element\nLandscape B: [0, -1, -1, 0, -1, -1]  // 2 peaks (0)</code></pre><p><span>Based on the rules above, write a function that takes in an array and returns either </span><code>\"mountain\"</code><span>, </span><code>\"valley\"</code><span>, or </span><code>\"neither\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>landscapeType([3, 4, 5, 4, 3]) \u279e \"mountain\"\n\nlandscapeType([9, 7, 3, 1, 2, 4]) \u279e \"valley\"\n\nlandscapeType([9, 8, 9]) \u279e \"valley\"\n\nlandscapeType([9, 8, 9, 8]) \u279e \"neither\"</code></pre><h3><span>Notes</span></h3><ul><li><span>A </span><strong><span>peak</span></strong><span> is not exactly the same as the </span><strong><span>max</span></strong><span> of an array. The </span><strong><span>max</span></strong><span> is a unique number, but an array may have multiple peaks. However, if there exists only one peak in an array, then it is true that the peak = max.</span></li><li><span>See comments for a hint.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/LgfitGtQZTJBNbsCQ",
  "tags": [
    "arrays",
    "functional_programming",
    "higher_order_functions"
  ],
  "tests": "Test.assertEquals(landscapeType([3, 4, 5, 4, 3]), \"mountain\")\nTest.assertEquals(landscapeType([9, 7, 3, 1, 2, 4]), \"valley\")\nTest.assertEquals(landscapeType([9, 8, 9]), \"valley\")\nTest.assertEquals(landscapeType([9, 8, 9, 8]), \"neither\", '2 peaks')\nTest.assertEquals(landscapeType([1, 3, 5, 4, 3, 2]), \"mountain\")\nTest.assertEquals(landscapeType([-1, 0, -1]), \"mountain\")\nTest.assertEquals(landscapeType([10, 9, 8, 7, 2, 3, 4, 5]), \"valley\")\nTest.assertEquals(landscapeType([350, 100, 200, 400, 700]), \"valley\")\nTest.assertEquals(landscapeType([-1, -1, 0, -1, -1]), \"mountain\")\nTest.assertEquals(landscapeType([0, -1, -1, 0, -1, -1]), \"neither\", '2 peaks + boundary')\nTest.assertEquals(landscapeType([1, 2, 3, 2, 4, 1]), \"neither\", '2 peaks')\nTest.assertEquals(landscapeType([5, 4, 3, 2, 1]), \"neither\", 'boundary')\nTest.assertEquals(landscapeType([1, 2, 3, 4]), \"neither\", 'boundary')",
  "title": "Mountains or Valleys"
}