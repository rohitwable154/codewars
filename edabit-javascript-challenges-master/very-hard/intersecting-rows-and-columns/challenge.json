{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "tCFfABNfydAuX6qvK",
  "code": "function transformMatrix(arr) {\n  \n}",
  "difficulty": "Very Hard",
  "instructions": "<p><span>Suppose any </span><code>nxm</code><span> matrix of </span><code>0</code><span>s and </span><code>1</code><span>s can be transformed into a second matrix, where each number in position </span><code>(i, j)</code><span> in the new matrix is the sum of </span><strong><span>1s</span></strong><span> in row </span><code>i</code><span> and column </span><code>j</code><span> in the original matrix, </span><strong><span>excluding itself</span></strong><span> (if it is a 1).</span></p><pre><code>[[1, 0, 0, 0, 1],\n[0, 1, 0, 0, 0],\n[0, 0, 0, 1, 0],\n[0, 1, 0, 1, 0],\n[0, 1, 0, 0, 0]]\n\n[1, 5, 2, 4, 1],\n[2, 4, 1, 3, 2],\n[2, 4, 1, 1, 2],\n[3, 2, 2, 2, 3],\n[2, 2, 1, 3, 2]\n\n// The 1 on the upper left corner has 1 other 1 in the same row as itself (excluding itself).\n// The 0 to the right of the 1 has 2 1's on the same row as itself, and 3 1's in the same column, etc.</code></pre><p><span>Create a function that transforms the first matrix into its second matrix equivalent.</span></p><h3><span>Examples</span></h3><pre><code>transformMatrix([\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1]\n]) \u279e [\n  [0, 2, 2],\n  [2, 0, 2],\n  [2, 2, 0]\n]\n\ntransformMatrix([\n  [1, 1, 1],\n  [0, 0, 1],\n  [0, 0, 1]\n]) \u279e [\n  [2, 2, 4],\n  [2, 2, 2],\n  [2, 2, 2]\n]\n\ntransformMatrix([\n  [1, 1, 1],\n  [0, 1, 1],\n  [0, 0, 1]\n]) \u279e [\n  [2, 3, 4],\n  [3, 2, 3],\n  [2, 3, 2]\n]</code></pre><h3><span>Notes</span></h3><p><span>It might be easier to visualize this by drawing the grid of 0's and 1's out on a sheet of paper, and drawing lines through a specific number's row and column.</span></p>",
  "source_url": "https://edabit.com/challenge/tCFfABNfydAuX6qvK",
  "tags": [
    "arrays",
    "higher_order_functions",
    "loops"
  ],
  "tests": "Test.assertSimilar(transformMatrix([\n\t[1, 0, 0, 0, 1],\n\t[0, 1, 0, 0, 0],\n\t[0, 0, 0, 1, 0],\n\t[0, 1, 0, 1, 0],\n\t[0, 1, 0, 0, 0]\n]), [\n\t[1, 5, 2, 4, 1], \n\t[2, 2, 1, 3, 2], \n\t[2, 4, 1, 1, 2], \n\t[3, 3, 2, 2, 3], \n\t[2, 2, 1, 3, 2]\n])\n\nTest.assertSimilar(transformMatrix([\n\t[1, 0, 0, 0],\n\t[0, 1, 0, 0],\n\t[0, 0, 1, 0]\n]), [\n\t[0, 2, 2, 1],\n\t[2, 0, 2, 1],\n\t[2, 2, 0, 1]\n])\n\nTest.assertSimilar(transformMatrix([\n\t[1, 1],\n\t[1, 1],\n\t[1, 1]\n]), [\n\t[3, 3],\n\t[3, 3],\n\t[3, 3]\n])\n\nTest.assertSimilar(transformMatrix([\n\t[1, 0, 0],\n\t[0, 1, 0],\n\t[0, 0, 1]\n]), [\n\t[0, 2, 2],\n\t[2, 0, 2],\n\t[2, 2, 0]\n])\n\nTest.assertSimilar(transformMatrix([\n\t[1, 1, 1],\n\t[0, 0, 1],\n\t[0, 0, 1]\n]), [\n\t[2, 2, 4],\n\t[2, 2, 2],\n\t[2, 2, 2]\n])\n\nTest.assertSimilar(transformMatrix([\n\t[1, 1, 1],\n\t[0, 1, 1],\n\t[0, 0, 1]\n]), [\n\t[2, 3, 4],\n\t[3, 2, 3],\n\t[2, 3, 2]\n])",
  "title": "Intersecting Rows and Columns"
}