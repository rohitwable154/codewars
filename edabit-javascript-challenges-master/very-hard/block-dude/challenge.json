{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "K8ydJQoJTq7yEJyk2",
  "code": "function canTraverse(x) {\n  \n}",
  "difficulty": "Very Hard",
  "instructions": "<p><span>In </span><strong><span>Block Dude</span></strong><span>, the main character can climb boxes, but only if they are stacked in a particular way so that he is able to climb them one at a time. More specifically, </span><strong><span>he can only climb UP or DOWN one box at a time</span></strong><span>.</span></p><p><span>Let </span><code>1</code><span>s represent the boxes, and </span><code>0</code><span> represent the background. Write a function that returns </span><code>true</code><span> if block dude </span><strong><span>can travel from the left side to the right side of the screen</span></strong><span> given his constraints.</span></p><p><span>For example, the sample layout below should return </span><code>true</code><span>.</span></p><pre><code>[\n  [0, 0, 0, 0, X, 0, 0, 0, 0],\n  [0, 0, 0, X, 1, X, X, 0, 0],\n  [0, X, X, 1, 1, 1, 1, X, 0],\n  [X, 1, 1, 1, 1, 1, 1, 1, X]\n]</code></pre><p><span>Since block dude can travel across these boxes (note: X's are just to show walking path and are </span><strong><span>not</span></strong><span> part of the actual input). On the other hand:</span></p><pre><code>[\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 1, 0, 0, 0, 0],\n  [0, X, X, 1, 1, 1, 1, 0, 0],\n  [X, 1, 1, 1, 1, 1, 1, 1, 0]\n]</code></pre><p><span>Should return </span><code>false</code><span>, since block dude is stuck at column 3, being unable to climb 2 boxes at once.</span></p><h3><span>Examples</span></h3><pre><code>canTraverse([\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 0, 0, 1, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 1, 0]\n]) \u279e false\n\n// Block dude can't jump down 2 blocks.\n\ncanTraverse([\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 1],\n  [0, 0, 1, 1, 1, 0, 1, 1, 1],\n  [0, 1, 1, 1, 1, 1, 1, 1, 1]\n]) \u279e true\n\n// Note: Sometimes the exit is at the top!\n\ncanTraverse([\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 1, 1, 1, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 1, 0]\n]) \u279e true\n\ncanTraverse([\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 1, 0]\n]) \u279e false\n\n// Block dude can't climb 2 blocks.</code></pre><h3><span>Notes</span></h3><p><span>You can play block dude here: </span><a href=\"http://azich.org/blockdude/\"><span>http://azich.org/blockdude/</span></a></p>",
  "source_url": "https://edabit.com/challenge/K8ydJQoJTq7yEJyk2",
  "tags": [
    "arrays",
    "functional_programming",
    "games",
    "higher_order_functions",
    "validation"
  ],
  "tests": "Test.assertEquals(canTraverse([\n\t[0, 0, 0, 0, 0, 0, 0, 0, 0], \n\t[0, 0, 0, 1, 0, 0, 0, 0, 0], \n\t[0, 0, 1, 1, 0, 0, 1, 0, 0], \n\t[0, 1, 1, 1, 1, 1, 1, 1, 0]\n]), false)\n\nTest.assertEquals(canTraverse([\n\t[0, 0, 0, 0, 0, 0, 0, 0, 0], \n\t[0, 0, 0, 1, 0, 0, 0, 0, 0], \n\t[0, 0, 1, 1, 1, 0, 1, 0, 0], \n\t[0, 1, 1, 1, 1, 1, 1, 1, 0]\n]), true)\n\nTest.assertEquals(canTraverse([\n\t[0, 0, 0, 0, 0, 0, 0, 0, 0], \n\t[0, 0, 0, 1, 0, 0, 0, 0, 0], \n\t[0, 0, 1, 1, 1, 1, 1, 0, 0], \n\t[0, 1, 1, 1, 1, 1, 1, 1, 0]\n]), true)\n\nTest.assertEquals(canTraverse([\n\t[0, 0, 0, 0, 0, 0, 0, 0, 0], \n\t[0, 0, 0, 1, 0, 0, 0, 0, 0], \n\t[0, 1, 1, 1, 1, 1, 1, 0, 0], \n\t[0, 1, 1, 1, 1, 1, 1, 1, 0]\n]), false)\n\nTest.assertEquals(canTraverse([\n\t[0, 0, 0, 0, 0, 0, 0, 0, 0], \n\t[0, 0, 0, 1, 1, 0, 0, 0, 0], \n\t[0, 0, 1, 1, 1, 1, 1, 0, 0], \n\t[0, 1, 1, 1, 1, 1, 1, 1, 0]\n]), true)\n\nTest.assertEquals(canTraverse([\n\t[0, 0, 0, 0, 0, 0, 0, 0, 0], \n\t[0, 0, 0, 0, 0, 0, 0, 0, 0], \n\t[0, 0, 1, 0, 0, 0, 1, 0, 0], \n\t[0, 1, 1, 1, 0, 1, 1, 1, 0]\n]), true)\n\nTest.assertEquals(canTraverse([\n\t[0, 0, 0, 0, 0, 0, 0, 0, 0], \n\t[0, 0, 0, 0, 0, 0, 0, 0, 0], \n\t[0, 0, 0, 0, 0, 0, 0, 0, 0], \n\t[0, 1, 1, 1, 0, 1, 1, 1, 0]\n]), true)\n\nTest.assertEquals(canTraverse([\n\t[0, 0, 0, 0, 0, 0, 0, 0, 0], \n\t[0, 0, 0, 1, 0, 0, 0, 0, 1], \n\t[0, 0, 1, 1, 1, 0, 1, 1, 1], \n\t[0, 1, 1, 1, 1, 1, 1, 1, 1]\n]), true)\n\nTest.assertEquals(canTraverse([\n\t[0, 0, 0, 0, 0, 0, 0, 0, 0], \n\t[0, 0, 0, 1, 0, 0, 0, 0, 1], \n\t[0, 0, 1, 1, 1, 0, 1, 0, 1], \n\t[0, 1, 1, 1, 1, 1, 1, 1, 1]\n]), false)",
  "title": "Block Dude"
}