{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "TyN8D68zYSg75i5gD",
  "code": "function factorSort(nums) {\n  \n}",
  "difficulty": "Very Hard",
  "instructions": "<p><span>A numbers </span><strong><span>factor length</span></strong><span> is simply its total number of factors.</span></p><p><span>For instance:</span></p><pre><code>3: 1, 3\n// 3's factor length = 2\n\n8: 1, 2, 4, 8\n// 8's factor length = 4\n\n36 : 1, 2, 3, 4, 6, 9, 12, 18, 36\n// 36's factor length = 9</code></pre><p><span>Create a function that sorts an array by </span><strong><span>factor length</span></strong><span> in </span><strong><span>descending order</span></strong><span>. If multiple numbers have the same factor length, sort these numbers in </span><strong><span>descending order</span></strong><span>, with the largest first.</span></p><p><span>In the example below, since 13 and 7 both have only 2 factors, we put 13 ahead of 7.</span></p><pre><code>factorSort([9, 7, 13, 12]) \u279e [12, 9, 13, 7]\n// 12 : 6, 9: 3, 7: 1, 13: 1</code></pre><h3><span>Examples</span></h3><pre><code>factorSort([1, 2, 31, 4]) \u279e [4, 31, 2, 1]\n\nfactorSort([5, 7, 9]) \u279e [9, 7, 5]\n\nfactorSort([15, 8, 2, 3]) \u279e [15, 8, 3, 2]</code></pre><h3><span>Notes</span></h3><p><span>Descending order: numbers with a higher factor length go before numbers with a lower factor length.</span></p>",
  "source_url": "https://edabit.com/challenge/TyN8D68zYSg75i5gD",
  "tags": [
    "arrays",
    "loops",
    "sorting"
  ],
  "tests": "Test.assertSimilar(factorSort([1, 2, 31, 4]), [4, 31, 2, 1])\nTest.assertSimilar(factorSort([5, 7, 9]), [9, 7, 5])\nTest.assertSimilar(factorSort([15, 8, 2, 3]), [15, 8, 3, 2])\nTest.assertSimilar(factorSort([1, 2, 3, 7, 11, 13, 16]), [16, 13, 11, 7, 3, 2, 1])\nTest.assertSimilar(factorSort([1, 5, 25, 17]), [25, 17, 5, 1])\nTest.assertSimilar(factorSort([1, 5, 4, 17]), [4, 17, 5, 1])",
  "title": "Sort by Factor Length"
}