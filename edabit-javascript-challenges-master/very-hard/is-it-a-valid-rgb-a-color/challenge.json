{
  "author_id": "Pustur",
  "author_url": "https://edabit.com/user/65dbBZynphj53nXqA",
  "challenge_id": "CoAPnr8jxcTah2CzZ",
  "code": "function validColor(color) {\n  \n}",
  "difficulty": "Very Hard",
  "instructions": "<p><span>Given an RGB(A) CSS color, determine whether its format is valid or not. Create a function that takes a string (e.g. </span><code>\"rgb(0, 0, 0)\"</code><span>) and return </span><code>true</code><span> if it's format is correct, otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>validColor(\"rgb(0,0,0)\") \u279e true\n\nvalidColor(\"rgb(0,,0)\") \u279e false\n\nvalidColor(\"rgb(255,256,255)\") \u279e false\n\nvalidColor(\"rgba(0,0,0,0.123456789)\") \u279e true</code></pre><h3><span>Notes</span></h3><p><span>There are a few edge cases. Check out the </span><strong><span>Tests</span></strong><span> tab to know more.</span></p>",
  "source_url": "https://edabit.com/challenge/CoAPnr8jxcTah2CzZ",
  "tags": [
    "conditions",
    "regex",
    "validation"
  ],
  "tests": "// True tests\nTest.assertEquals(validColor('rgb(0,0,0)'), true, 'rgb lowest valid numbers');\nTest.assertEquals(validColor('rgb(255,255,255)'), true, 'rgb highest valid numbers');\nTest.assertEquals(validColor('rgba(0,0,0,0)'), true, 'rgba lowest valid numbers');\nTest.assertEquals(validColor('rgba(255,255,255,1)'), true, 'rgba highest valid numbers');\nTest.assertEquals(validColor('rgba(0,0,0,0.123456789)'), true, 'alpha can have many decimals');\nTest.assertEquals(validColor('rgba(0,0,0,.8)'), true, 'in alpha the number before the dot is optional');\nTest.assertEquals(validColor('rgba(\t0 , 127\t, 255 , 0.1\t)'), true, 'whitespace is allowed around numbers (even tabs)');\nTest.assertEquals(validColor('rgb(0%,50%,100%)'), true, 'numbers can be percentages');\n\n// False tests\nTest.assertEquals(validColor('rgb(0,,0)'), false, 'INVALID: missing number');\nTest.assertEquals(validColor('rgb (0,0,0)'), false, 'INVALID: whitespace before parenthesis');\nTest.assertEquals(validColor('rgb(0,0,0,0)'), false, 'INVALID: rgb with 4 numbers');\nTest.assertEquals(validColor('rgba(0,0,0)'), false, 'INVALID: rgba with 3 numbers');\nTest.assertEquals(validColor('rgb(-1,0,0)'), false, 'INVALID: numbers below 0');\nTest.assertEquals(validColor('rgb(255,256,255)'), false, 'INVALID: numbers above 255');\nTest.assertEquals(validColor('rgb(100%,100%,101%)'), false, 'INVALID: numbers above 100%');\nTest.assertEquals(validColor('rgba(0,0,0,-1)'), false, 'INVALID: alpha below 0');\nTest.assertEquals(validColor('rgba(0,0,0,1.1)'), false, 'INVALID: alpha above 1');",
  "title": "Is It a Valid RGB(A) Color?"
}