{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "MCK2Rqzn78pMksvsK",
  "code": "function freqCount(arr, el) {\n  \n}",
  "difficulty": "Very Hard",
  "instructions": "<p><span>Create a function that takes in a nested array and an element and returns the frequency of that element by nested level.</span></p><h3><span>Examples</span></h3><pre><code>freqCount([1, 4, 4, [1, 1, [1, 2, 1, 1]]], 1)\n\u279e [[0, 1], [1, 2], [2, 3]]\n// The array has one 1 at level 0, 2 1's at level 1, and 3 1's at level 2.\n\nfreqCount([1, 5, 5, [5, [1, 2, 1, 1], 5, 5], 5, [5]], 5)\n\u279e [[0, 3], [1, 4], [2, 0]]\n\nfreqCount([1, [2], 1, [[2]], 1, [[[2]]], 1, [[[[2]]]]], 2)\n\u279e [[0, 0], [1, 1], [2, 1], [3, 1], [4, 1]]</code></pre><h3><span>Notes</span></h3><ul><li><span>Start the default nesting (an array with no nesting) at 0.</span></li><li><span>Output the nested levels in order (e.g. 0 first, then 1, then 2, etc.).</span></li><li><span>Output 0 for the frequency if that particular level has no instances of that element (see example #2).</span></li></ul>",
  "source_url": "https://edabit.com/challenge/MCK2Rqzn78pMksvsK",
  "tags": [
    "arrays",
    "language_fundamentals",
    "recursion"
  ],
  "tests": "Test.assertSimilar(freqCount([1, 1, 1, 1], 1), [[0, 4]])\nTest.assertSimilar(freqCount([1, 1, 2, 2], 1), [[0, 2]])\nTest.assertSimilar(freqCount([1, 1, 2, [1]], 1), [[0, 2], [1, 1]])\nTest.assertSimilar(freqCount([1, 1, 2, [[1]]], 1), [[0, 2], [1, 0], [2, 1]])\nTest.assertSimilar(freqCount([[[1]]], 1), [[0, 0], [1, 0], [2, 1]])\nTest.assertSimilar(freqCount([1, 4, 4, [1, 1, [1, 2, 1, 1]]], 1), [[0, 1], [1, 2], [2, 3]])\nTest.assertSimilar(freqCount([1, 5, 5, [5, [1, 2, 1, 1], 5, 5], 5, [5]], 5), [[0, 3], [1, 4], [2, 0]])\nTest.assertSimilar(freqCount([1, [2], 1, [[2]], 1, [[[2]]], 1, [[[[2]]]]], 2), [[0, 0], [1, 1], [2, 1], [3, 1], [4, 1]])",
  "title": "Frequency by Level of Nesting"
}