{
  "author_id": "Matt",
  "author_url": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
  "challenge_id": "TeadejgLka6ZxKhWM",
  "code": "function remix(str, arr) {\n  \n}",
  "difficulty": "Medium",
  "instructions": "<p><span>Create a function that takes both a string and an array of numbers as arguments. Rearrange the letters in the string to be in the order specified by the index numbers. Return the \"remixed\" string.</span></p><h3><span>Examples</span></h3><pre><code>remix(\"abcd\", [0, 3, 1, 2]) \u279e \"acdb\"</code></pre><p><span>The string you'll be returning will have: \"a\" at index 0, \"b\" at index 3, \"c\" at index 1, \"d\" at index 2, because the order of those characters maps to their corresponding numbers in the index array.</span></p><pre><code>remix(\"PlOt\", [1, 3, 0, 2]) \u279e \"OPtl\"\n\nremix(\"computer\", [0, 2, 1, 5, 3, 6, 7, 4]) \u279e \"cmourpte\"</code></pre><h3><span>Notes</span></h3><p><span>Be sure not to change the original case; otherwise no gotchas. Assume you'll be given a string and array of equal length, both containing valid characters (A-Z, a-z, or 0-9).</span></p>",
  "source_url": "https://edabit.com/challenge/TeadejgLka6ZxKhWM",
  "tags": [
    "arrays",
    "formatting",
    "strings"
  ],
  "tests": "Test.assertEquals(remix(\"abcd\", [0, 3, 1, 2]), \"acdb\");\nTest.assertEquals(remix(\"PlOt\", [1, 3, 0, 2]), \"OPtl\");\nTest.assertEquals(remix(\"computer\", [0, 2, 1, 5, 3, 6, 7, 4]), \"cmourpte\");\nTest.assertEquals(remix(\"twist\", [4, 0, 1, 2, 3]), \"wistt\");\nTest.assertEquals(remix(\"responsibility\", [0, 6, 8, 11, 10, 7, 13, 5, 3, 2, 4, 12, 1, 9]), \"rtibliensyopis\");\nTest.assertEquals(remix(\"Interference\", [6, 9, 10, 11, 7, 3, 0, 2, 5, 1, 8, 4]), \"enrfeeIrcnte\");\nTest.assertEquals(remix(\"sequence\", [5, 7, 3, 4, 0, 1, 2, 6]), \"encqusee\");",
  "title": "Remix the String"
}