{
  "author_id": "Matt",
  "author_url": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
  "challenge_id": "62FxK8G5XB6mdX4Fy",
  "code": "function letterCheck(arr) {\n  \n}",
  "difficulty": "Medium",
  "instructions": "<p><span>Create a function that accepts an array of two strings and checks if the letters in the second string are present in the first string.</span></p><h3><span>Examples</span></h3><pre><code>letterCheck([\"trances\", \"nectar\"]) \u279e true\n\nletterCheck([\"compadres\", \"DRAPES\"]) \u279e true\n\nletterCheck([\"parses\", \"parsecs\"]) \u279e false</code></pre><h3><span>Notes</span></h3><ul><li><span>Function should not be case sensitive (as indicated in the second example).</span></li><li><span>Both strings are presented as a single argument in the form of an array.</span></li><li><span>Bonus if you can do this without RegEx.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/62FxK8G5XB6mdX4Fy",
  "tags": [
    "regex",
    "strings",
    "validation"
  ],
  "tests": "Test.assertEquals(letterCheck([\"trances\", \"nectar\"]), true)\nTest.assertEquals(letterCheck([\"THE EYES\", \"they see\"]), true)\nTest.assertEquals(letterCheck([\"assert\", \"staring\"]), false)\nTest.assertEquals(letterCheck([\"arches\", \"later\"]), false)\nTest.assertEquals(letterCheck([\"dale\", \"caller\"]), false)\nTest.assertEquals(letterCheck([\"parses\", \"parsecs\"]), false)\nTest.assertEquals(letterCheck([\"replays\", \"adam\"]), false)\nTest.assertEquals(letterCheck([\"mastering\", \"streaming\"]), true)\nTest.assertEquals(letterCheck([\"drapes\", \"compadres\"]), false)\nTest.assertEquals(letterCheck([\"deltas\", \"slated\"]), true)",
  "title": "Are Letters in the Second String Present in the First?"
}