{
  "author_id": "Tony",
  "author_url": "https://edabit.com/user/ketYXr2XoMEbbgn5W",
  "challenge_id": "CvPCBc9FtTLix9zov",
  "code": "function uniqueSort(arr) {\n  \n}",
  "difficulty": "Medium",
  "instructions": "<p><span>Given an array of numbers, write a function that returns an array that... </span></p><ol><li><span>Has all duplicate elements removed.</span></li><li><span>Is sorted from least to greatest value.</span></li></ol><h3><span>Examples</span></h3><pre><code>uniqueSort([1, 2, 4, 3]) \u279e [1, 2, 3, 4]\n\nuniqueSort([1, 4, 4, 4, 4, 4, 3, 2, 1, 2]) \u279e [1, 2, 3, 4]\n\nuniqueSort([6, 7, 3, 2, 1]) \u279e [1, 2, 3, 6, 7]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
  "source_url": "https://edabit.com/challenge/CvPCBc9FtTLix9zov",
  "tags": [
    "arrays",
    "data_structures",
    "numbers",
    "sorting"
  ],
  "tests": "Test.assertSimilar(\n  uniqueSort([1, 5, 8, 2, 3, 4, 4, 4, 10]),\n  [1, 2, 3, 4, 5, 8, 10]\n);\n\nTest.assertSimilar(\n\tuniqueSort([1, 2, 5, 4, 7, 7, 7]),\n  [1, 2, 4, 5, 7]\n);\n\nTest.assertSimilar(\n\tuniqueSort([7, 6, 5, 4, 3, 2, 1, 0, 1]),\n  [0, 1, 2, 3, 4, 5, 6, 7]\n);\n\nTest.assertSimilar(\n\tuniqueSort([3, 6, 5, 4, 3, 27, 1, 100, 1]),\n  [1, 3, 4, 5, 6, 27, 100]\n);\n\nTest.assertSimilar(\n\tuniqueSort([-9, -3.1414, -87, 8, -4.323827, -3.1415, -3.1415]),\n  [-87, -9, -4.323827, -3.1415, -3.1414, 8]\n);",
  "title": "Purge and Organize"
}