{
  "author_id": "Helen Yu",
  "author_url": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
  "challenge_id": "XmozNpoBjcqrKD82i",
  "code": "function countOnes(arr) {\n  \n}",
  "difficulty": "Medium",
  "instructions": "<p><span>Create a function that counts the number of blocks of </span><strong><span>two or more</span></strong><span> adjacent </span><code>1</code><span>s in an array.</span></p><h3><span>Examples</span></h3><pre><code>countOnes([1, 0, 0, 1, 1, 0, 1, 1, 1]) \u279e 2\n// Two instances: [1, 1] (middle) and [1, 1, 1] (end)\n\ncountOnes([1, 0, 1, 0, 1, 0, 1, 0]) \u279e 0\n\ncountOnes([1, 1, 1, 1, 0, 0, 0, 0]) \u279e 1\n\ncountOnes([0, 0, 0]) \u279e 0</code></pre><h3><span>Notes</span></h3><ul><li><span>A single 1 by itself (surrounded by a zero on its left and right), does </span><strong><span>not</span></strong><span> count towards the total (see first example).</span></li><li><span>Each input will contain only zeroes and ones.</span></li></ul>",
  "source_url": "https://edabit.com/challenge/XmozNpoBjcqrKD82i",
  "tags": [
    "arrays",
    "regex",
    "strings"
  ],
  "tests": "Test.assertEquals(countOnes([1, 1, 1, 1, 1]), 1)\nTest.assertEquals(countOnes([1, 1, 1, 1, 0]), 1)\nTest.assertEquals(countOnes([0, 0, 0, 0, 0]), 0)\nTest.assertEquals(countOnes([1, 0, 0, 0, 0]), 0)\nTest.assertEquals(countOnes([1, 0, 1, 0, 1]), 0)\nTest.assertEquals(countOnes([1, 0, 0, 0, 1, 0, 0, 1, 1]), 1)\nTest.assertEquals(countOnes([1, 1, 0, 1, 1, 0, 0, 1, 1]), 3)\nTest.assertEquals(countOnes([1, 0, 0, 1, 1, 0, 0, 1, 1]), 2)\nTest.assertEquals(countOnes([1, 0, 0, 1, 1, 0, 1, 1, 1]), 2)\nTest.assertEquals(countOnes([1, 0, 1, 0, 1, 0, 1, 0]), 0)\nTest.assertEquals(countOnes([1, 1, 1, 1, 0, 0, 0, 0]), 1)\nTest.assertEquals(countOnes([1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1]), 3)",
  "title": "Number of Two or More Consecutive Ones"
}