{
  "author_id": "drecdroid",
  "author_url": "https://edabit.com/user/XrzvNadiHFD5oWyLZ",
  "challenge_id": "ezv3TCDcgAYhyL3R2",
  "code": "function joinPath(portion1, portion2) {\n  \n}",
  "difficulty": "Easy",
  "instructions": "<p><span>Write a function that receives two portions of a path and joins them. The portions will be joined with the \"/\" separator. There could be only one separator and if it is not present it should be added.</span></p><h3><span>Examples</span></h3><pre><code>joinPath(\"portion1\", \"portion2\") \u279e \"portion1/portion2\"\n\njoinPath(\"portion1/\", \"portion2\") \u279e \"portion1/portion2\"\n\njoinPath(\"portion1\", \"/portion2\") \u279e \"portion1/portion2\"\n\njoinPath(\"portion1/\", \"/portion2\") \u279e \"portion1/portion2\"</code></pre><h3><span>Notes</span></h3><p><span>Try to not  solve this problem using only four </span><code>if</code><span> conditions.</span></p>",
  "source_url": "https://edabit.com/challenge/ezv3TCDcgAYhyL3R2",
  "tags": [
    "strings"
  ],
  "tests": "Test.assertEquals(joinPath(\"portion1\", \"portion2\"), \"portion1/portion2\")\nTest.assertEquals(joinPath(\"portion1/\", \"portion2\"), \"portion1/portion2\")\nTest.assertEquals(joinPath(\"portion1\", \"/portion2\"), \"portion1/portion2\")\nTest.assertEquals(joinPath(\"portion1/\", \"/portion2\"), \"portion1/portion2\")\nTest.assertEquals(joinPath(\"5wf7fny\", \"stJKXlc8\"), \"5wf7fny/stJKXlc8\")\nTest.assertEquals(joinPath(\"5wf7fny/\", \"stJKXlc8\"), \"5wf7fny/stJKXlc8\")\nTest.assertEquals(joinPath(\"5wf7fny\", \"/stJKXlc8\"), \"5wf7fny/stJKXlc8\")\nTest.assertEquals(joinPath(\"5wf7fny/\", \"/stJKXlc8\"), \"5wf7fny/stJKXlc8\")\nTest.assertEquals(joinPath(\"FKBZOBHo\", \"GNcYGnB\"), \"FKBZOBHo/GNcYGnB\")\nTest.assertEquals(joinPath(\"FKBZOBHo/\", \"GNcYGnB\"), \"FKBZOBHo/GNcYGnB\")\nTest.assertEquals(joinPath(\"FKBZOBHo\", \"/GNcYGnB\"), \"FKBZOBHo/GNcYGnB\")\nTest.assertEquals(joinPath(\"FKBZOBHo/\", \"/GNcYGnB\"), \"FKBZOBHo/GNcYGnB\")\nTest.assertEquals(joinPath(\"vL533Y3\", \"uVz3nul\"), \"vL533Y3/uVz3nul\")\nTest.assertEquals(joinPath(\"vL533Y3/\", \"uVz3nul\"), \"vL533Y3/uVz3nul\")\nTest.assertEquals(joinPath(\"vL533Y3\", \"/uVz3nul\"), \"vL533Y3/uVz3nul\")\nTest.assertEquals(joinPath(\"vL533Y3/\", \"/uVz3nul\"), \"vL533Y3/uVz3nul\")\nTest.assertEquals(joinPath(\"kfDOTwf\", \"Xr8viY8e\"), \"kfDOTwf/Xr8viY8e\")\nTest.assertEquals(joinPath(\"kfDOTwf/\", \"Xr8viY8e\"), \"kfDOTwf/Xr8viY8e\")\nTest.assertEquals(joinPath(\"kfDOTwf\", \"/Xr8viY8e\"), \"kfDOTwf/Xr8viY8e\")\nTest.assertEquals(joinPath(\"kfDOTwf/\", \"/Xr8viY8e\"), \"kfDOTwf/Xr8viY8e\")\nTest.assertEquals(joinPath(\"F4tBPmoV\", \"Lv18joOw\"), \"F4tBPmoV/Lv18joOw\")\nTest.assertEquals(joinPath(\"F4tBPmoV/\", \"Lv18joOw\"), \"F4tBPmoV/Lv18joOw\")\nTest.assertEquals(joinPath(\"F4tBPmoV\", \"/Lv18joOw\"), \"F4tBPmoV/Lv18joOw\")\nTest.assertEquals(joinPath(\"F4tBPmoV/\", \"/Lv18joOw\"), \"F4tBPmoV/Lv18joOw\")\nTest.assertEquals(joinPath(\"7ASOjVuT\", \"wwPOgKX\"), \"7ASOjVuT/wwPOgKX\")\nTest.assertEquals(joinPath(\"7ASOjVuT/\", \"wwPOgKX\"), \"7ASOjVuT/wwPOgKX\")\nTest.assertEquals(joinPath(\"7ASOjVuT\", \"/wwPOgKX\"), \"7ASOjVuT/wwPOgKX\")\nTest.assertEquals(joinPath(\"7ASOjVuT/\", \"/wwPOgKX\"), \"7ASOjVuT/wwPOgKX\")\nTest.assertEquals(joinPath(\"r1AiTrL\", \"KkyjD3K\"), \"r1AiTrL/KkyjD3K\")\nTest.assertEquals(joinPath(\"r1AiTrL/\", \"KkyjD3K\"), \"r1AiTrL/KkyjD3K\")\nTest.assertEquals(joinPath(\"r1AiTrL\", \"/KkyjD3K\"), \"r1AiTrL/KkyjD3K\")\nTest.assertEquals(joinPath(\"r1AiTrL/\", \"/KkyjD3K\"), \"r1AiTrL/KkyjD3K\")\nTest.assertEquals(joinPath(\"1h1gRAxu\", \"apQtQYgl\"), \"1h1gRAxu/apQtQYgl\")\nTest.assertEquals(joinPath(\"1h1gRAxu/\", \"apQtQYgl\"), \"1h1gRAxu/apQtQYgl\")\nTest.assertEquals(joinPath(\"1h1gRAxu\", \"/apQtQYgl\"), \"1h1gRAxu/apQtQYgl\")\nTest.assertEquals(joinPath(\"1h1gRAxu/\", \"/apQtQYgl\"), \"1h1gRAxu/apQtQYgl\")\nTest.assertEquals(joinPath(\"IYo5kuL\", \"QFEM6dSv\"), \"IYo5kuL/QFEM6dSv\")\nTest.assertEquals(joinPath(\"IYo5kuL/\", \"QFEM6dSv\"), \"IYo5kuL/QFEM6dSv\")\nTest.assertEquals(joinPath(\"IYo5kuL\", \"/QFEM6dSv\"), \"IYo5kuL/QFEM6dSv\")\nTest.assertEquals(joinPath(\"IYo5kuL/\", \"/QFEM6dSv\"), \"IYo5kuL/QFEM6dSv\")\nTest.assertEquals(joinPath(\"M6c7OnQI\", \"nj-CEAqV\"), \"M6c7OnQI/nj-CEAqV\")\nTest.assertEquals(joinPath(\"M6c7OnQI/\", \"nj-CEAqV\"), \"M6c7OnQI/nj-CEAqV\")\nTest.assertEquals(joinPath(\"M6c7OnQI\", \"/nj-CEAqV\"), \"M6c7OnQI/nj-CEAqV\")\nTest.assertEquals(joinPath(\"M6c7OnQI/\", \"/nj-CEAqV\"), \"M6c7OnQI/nj-CEAqV\")",
  "title": "Join Two Portions of a Path"
}