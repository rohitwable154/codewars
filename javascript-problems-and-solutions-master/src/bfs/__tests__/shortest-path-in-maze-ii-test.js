import { assert } from 'chai';
import { shortestPath } from '../shortest-path-in-maze-ii';

describe('Shortest Path in Maze II', () => {
  const testCases = [
    [
      [
        ['.', 'X', '.', '#', '.', '.'],
        ['.', '#', '.', '.', '#', '.'],
        ['.', '#', '.', '.', '.', '.'],
        ['.', '#', '#', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '#'],
      ],
      [0, 1],
      3,
      -1,
    ],
    [
      [
        ['.', 'X', '.', '#', '.', '.'],
        ['.', '#', '.', '.', '#', '.'],
        ['.', '#', '.', '.', '.', '.'],
        ['.', '#', '#', '.', '.', '.'],
        ['.', 'Y', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '#'],
      ],
      [0, 1],
      3,
      4,
    ],
    [
      [
        ['#', 'X', '.', '#', '.', '.'],
        ['#', '#', '.', '.', '#', '.'],
        ['#', '#', '#', '.', '.', '.'],
        ['#', '#', '#', '.', '.', '.'],
        ['.', '#', '#', '.', '.', '.'],
        ['.', 'Y', '.', '.', '.', '#'],
      ],
      [0, 1],
      3,
      7,
    ],
    [
      [
        ['#', 'X', '.', '#', '.', '.'],
        ['#', '#', '.', '.', '#', '.'],
        ['#', '#', '#', '.', '.', '.'],
        ['#', '#', '#', '.', '.', '.'],
        ['.', '.', '#', '.', '.', '.'],
        ['.', 'Y', '.', '.', '.', '#'],
      ],
      [0, 1],
      3,
      5,
    ],
    [
      [
        ['.', 'X', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.'],
        ['.', 'Y', '.', '.', '.', '.'],
      ],
      [0, 1],
      3,
      5,
    ],
  ];

  testCases.forEach(([maze, px, k, expected], index) => {
    it(`should get the minimum steps for case ${index}`, () => {
      const actual = shortestPath(maze, px, k);
      assert.equal(actual, expected);
    });
  });
});
